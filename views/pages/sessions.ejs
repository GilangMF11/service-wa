<main class="nxl-container">
  <div class="nxl-content">
    <!-- [ page-header ] start -->
    <div class="page-header mb-4">
      <div class="page-header-left d-flex align-items-center">
        <div class="page-header-title">
          <h4 class="fw-bold text-primary mb-1">Sessions</h4>
        </div>
        <nav aria-label="breadcrumb">
          <ol class="breadcrumb ms-3 mb-0">
            <li class="breadcrumb-item"><a href="/" class="text-decoration-none">Home</a></li>
            <li class="breadcrumb-item active">Sessions</li>
          </ol>
        </nav>
      </div>
    </div>
    <!-- [ page-header ] end -->

    <div class="main-content">
      <div class="card shadow-sm border-0 mb-4">
        <div class="card-body p-4">
          <div class="d-flex justify-content-between align-items-center">
            <div class="input-group" style="max-width: 400px;">
              <span class="input-group-text bg-white border-end-0">
                <i class="bi bi-plus-circle-fill text-primary"></i>
              </span>
              <input type="text" id="newSessionDesc" class="form-control border-start-0" placeholder="Deskripsi sesi baru...">
            </div>
            <button class="btn btn-primary px-4" onclick="createSession()">
              <i class="bi bi-plus-lg me-2"></i>Buat Session
            </button>
          </div>
        </div>
      </div>
          
      <div id="session-list" class="row g-4">
        <div class="col-12 text-center py-5">
          <div class="spinner-border text-primary" role="status"></div>
          <p class="mt-3 text-muted">Memuat data...</p>
        </div>
      </div>
    </div>
  </div>
</main>

<style>
  .hover-shadow {
    transition: all 0.3s ease;
    border-radius: 12px;
  }
  
  .hover-shadow:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1) !important;
    transform: translateY(-5px);
  }
  
  .card {
    border-radius: 12px;
    overflow: hidden;
  }
  
  .status-badge {
    padding: 6px 12px;
    border-radius: 50px;
    font-size: 12px;
    font-weight: 600;
  }
  
  .session-details p {
    margin-bottom: 8px;
    display: flex;
    align-items: center;
  }
  
  .session-details .icon {
    width: 20px;
    margin-right: 8px;
    text-align: center;
  }
  
  .btn-primary {
    background: linear-gradient(45deg, #4a6bff, #657eff);
    border: none;
    box-shadow: 0 4px 12px rgba(74, 107, 255, 0.2);
  }
  
  .btn-primary:hover {
    background: linear-gradient(45deg, #3955d8, #4a6bff);
    box-shadow: 0 6px 16px rgba(74, 107, 255, 0.3);
  }
</style>

<script>
  async function loadSessions() {
    const token = localStorage.getItem('token');
    const container = document.getElementById('session-list');
    container.innerHTML = `
      <div class="col-12 text-center py-5">
        <div class="spinner-border text-primary" role="status"></div>
        <p class="mt-3 text-muted">Memuat data...</p>
      </div>
    `;

    try {
      const response = await fetch('http://localhost:3000/api/whatsapp/sessions', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      const data = await response.json();

      if (!data.success) {
        container.innerHTML = `
          <div class="col-12 text-center py-5">
            <i class="bi bi-exclamation-circle text-danger fs-1 mb-3"></i>
            <h5 class="text-danger">Gagal memuat session</h5>
            <p class="text-muted">Silakan coba lagi nanti</p>
          </div>
        `;
        return;
      }

      if (data.sessions.length === 0) {
        container.innerHTML = `
          <div class="col-12 text-center py-5">
            <i class="bi bi-chat-left-dots fs-1 text-muted mb-3"></i>
            <h5 class="text-muted">Tidak ada session ditemukan</h5>
            <p class="text-muted">Buat session baru untuk memulai</p>
          </div>
        `;
        return;
      }

      container.innerHTML = '';

      data.sessions.forEach((session) => {
        const card = document.createElement('div');
        card.className = 'col-md-6 col-lg-4';

        const formattedDate = new Date(session.created_at).toLocaleDateString('id-ID', {
          day: 'numeric',
          month: 'long',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });

        card.innerHTML = `
          <a href="/sessions/detail?id=${session.session_id}" class="text-decoration-none text-dark">
            <div class="card h-100 shadow-sm hover-shadow border-0">
              <div class="card-header bg-white border-0 pt-4 pb-0 px-4">
                <div class="d-flex justify-content-between align-items-center">
                  <h5 class="card-title fw-bold mb-0">Session ID</h5>
                  <span class="status-badge ${session.isConnected ? 'bg-success' : 'bg-danger'}">
                    ${session.isConnected ? 'Terhubung' : 'Belum Terhubung'}
                  </span>
                </div>
              </div>
              <div class="card-body px-4 py-3">
                <p class="mb-3 text-primary fw-bold">${session.session_id}</p>
                
                <div class="session-details">
                  <p>
                    <span class="icon"><i class="bi bi-person"></i></span>
                    <span>User ID: <strong>${session.user_id}</strong></span>
                  </p>
                  <p>
                    <span class="icon"><i class="bi bi-qr-code"></i></span>
                    <span>QR Code: <strong>${session.hasQrCode ? 'Tersedia' : 'Tidak Tersedia'}</strong></span>
                  </p>
                  <p>
                    <span class="icon"><i class="bi bi-card-text"></i></span>
                    <span>Deskripsi: <strong>${session.description}</strong></span>
                  </p>
                </div>
                
                <p class="text-muted small mt-4 mb-0">
                  <i class="bi bi-calendar-event me-1"></i> Dibuat: ${formattedDate}
                </p>
              </div>
            </div>
          </a>
        `;

        container.appendChild(card);
      });

    } catch (error) {
      console.error('Error saat memuat session:', error);
      container.innerHTML = `
        <div class="col-12 text-center py-5">
          <i class="bi bi-x-circle text-danger fs-1 mb-3"></i>
          <h5 class="text-danger">Terjadi kesalahan</h5>
          <p class="text-muted">Tidak dapat mengambil data dari server</p>
        </div>
      `;
    }
  }

  async function createSession() {
    const token = localStorage.getItem('token');
    const description = document.getElementById('newSessionDesc').value.trim();

    if (!description) {
      showToast('Deskripsi harus diisi', 'warning');
      return;
    }

    try {
      // Menampilkan loading indicator
      const btn = document.querySelector('button[onclick="createSession()"]');
      const originalText = btn.innerHTML;
      btn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Membuat...';
      btn.disabled = true;
      
      const res = await fetch('http://localhost:3000/api/whatsapp/session', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ description })
      });

      const data = await res.json();

      if (data.success) {
        showToast('Session berhasil dibuat. QR Code akan muncul di detail.', 'success');
        loadSessions(); // refresh daftar session
        document.getElementById('newSessionDesc').value = ''; // kosongkan input
      } else {
        showToast('Gagal membuat session: ' + data.message, 'error');
      }
      
      // Kembalikan button ke keadaan semula
      btn.innerHTML = originalText;
      btn.disabled = false;
      
    } catch (error) {
      console.error('Gagal membuat session:', error);
      showToast('Terjadi kesalahan saat membuat session.', 'error');
      
      // Kembalikan button ke keadaan semula
      const btn = document.querySelector('button[onclick="createSession()"]');
      btn.innerHTML = originalText;
      btn.disabled = false;
    }
  }
  
  function showToast(message, type = 'info') {
    // Cek apakah container toast sudah ada
    let toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) {
      toastContainer = document.createElement('div');
      toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
      document.body.appendChild(toastContainer);
    }
    
    // Tentukan warna berdasarkan tipe
    let bgColor = 'bg-primary';
    if (type === 'success') bgColor = 'bg-success';
    if (type === 'warning') bgColor = 'bg-warning text-dark';
    if (type === 'error') bgColor = 'bg-danger';
    
    // Buat element toast
    const toastEl = document.createElement('div');
    toastEl.className = `toast ${bgColor} text-white`;
    toastEl.setAttribute('role', 'alert');
    toastEl.setAttribute('aria-live', 'assertive');
    toastEl.setAttribute('aria-atomic', 'true');
    
    toastEl.innerHTML = `
      <div class="toast-header">
        <strong class="me-auto">${type.charAt(0).toUpperCase() + type.slice(1)}</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        ${message}
      </div>
    `;
    
    toastContainer.appendChild(toastEl);
    
    // Gunakan Bootstrap Toast API
    const toast = new bootstrap.Toast(toastEl);
    toast.show();
    
    // Hapus toast setelah ditampilkan
    toastEl.addEventListener('hidden.bs.toast', function() {
      toastEl.remove();
    });
  }

  // Jalankan saat halaman dimuat
  window.addEventListener('DOMContentLoaded', loadSessions);
</script>
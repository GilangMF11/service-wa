<main class="nxl-container apps-container apps-chat">
    <div class="nxl-content without-header nxl-full-content">
      <div class="main-content d-flex">
        <!-- Sidebar Chat -->
        <div class="content-sidebar content-sidebar-xl border-end" id="chat-sidebar" style="width: 30%;">
          <div class="content-sidebar-header p-3 border-bottom d-flex justify-content-between align-items-center bg-light">
            <div class="d-flex align-items-center">
              <i class="bi bi-chat-dots-fill text-primary me-2"></i>
              <h5 class="m-0 fw-bold">Chat</h5>
            </div>
            <div class="position-relative">
              <input type="text" id="search-chat" class="form-control form-control-sm rounded-pill" placeholder="Cari chat...">
              <i class="bi bi-search position-absolute" style="right: 10px; top: 7px; font-size: 14px; color: #999;"></i>
            </div>
          </div>
          <div class="content-sidebar-body" id="chat-list" style="overflow-y: auto; max-height: 80vh;">
            <div class="d-flex justify-content-center align-items-center p-4">
              <div class="spinner-border text-primary" role="status" style="width: 1.5rem; height: 1.5rem;">
                <span class="visually-hidden">Memuat...</span>
              </div>
              <span class="ms-2 text-muted">Memuat daftar chat...</span>
            </div>
          </div>
        </div>
  
        <!-- Panel Obrolan -->
        <div class="content-area d-flex flex-column w-100 position-relative" id="chat-panel" style="background-color: #f5f6fa;">
          <div class="d-flex flex-column justify-content-center align-items-center h-100">
            <div class="text-center p-4">
              <div class="mb-4">
                <i class="bi bi-chat-square-text" style="font-size: 64px; color: #e2e8f0;"></i>
              </div>
              <h5 class="text-muted">Pilih percakapan di sebelah kiri</h5>
              <p class="text-muted small">Pesan-pesan akan ditampilkan di sini</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
  
  <!-- Media Viewer Modal -->
  <div id="mediaViewerModal" class="media-viewer-modal">
    <span class="media-viewer-close" onclick="closeMediaViewer()">&times;</span>
    <img id="mediaViewerContent" class="media-viewer-content">
  </div>
  
  <style>
    /* General Styling */
    :root {
      --primary-color: #4361ee;
      --light-primary: rgba(67, 97, 238, 0.1);
      --bubble-me: #4361ee;
      --bubble-them: #f8f9fa;
      --chat-bg: #f5f6fa;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    /* Chat List Styling */
    .single-item {
      transition: all 0.2s ease;
      border-left: 3px solid transparent;
    }
    
    .single-item:hover {
      background-color: var(--light-primary);
      border-left: 3px solid var(--primary-color);
    }
    
    .single-item.active {
      background-color: var(--light-primary);
      border-left: 3px solid var(--primary-color);
    }
    
    .avatar-image {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      font-size: 18px;
      flex-shrink: 0;
      background-color: #e1e6f9 !important;
      color: var(--primary-color) !important;
    }
    
    .unread-badge {
      position: absolute;
      top: -5px;
      right: -5px;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background-color: #dc3545;
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 11px;
      font-weight: bold;
      border: 2px solid white;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.1); }
      100% { transform: scale(1); }
    }
    
    .avatar-container {
      position: relative;
      display: inline-block;
    }
    
    .message-status {
      font-size: 10px;
      color: #6c757d;
      margin-top: 2px;
    }
    
    .status-delivered {
      color: #28a745;
    }
    
    .status-read {
      color: #007bff;
    }
    
    .status-sent {
      color: #6c757d;
    }
    
    .time-badge {
      font-size: 12px;
      color: #8a96a3;
    }
    
    /* Chat Panel Styling */
    .chat-header {
      padding: 15px;
      background-color: white;
      border-bottom: 1px solid #e0e0e0;
      display: flex;
      align-items: center;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .chat-messages {
      padding: 20px;
      overflow-y: auto;
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    
    .message-bubble {
      max-width: 70%;
      padding: 10px 15px;
      border-radius: 18px;
      position: relative;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }
    
    .message-bubble.me {
      background-color: var(--bubble-me);
      color: white;
      border-bottom-right-radius: 4px;
      align-self: flex-end;
    }
    
    .message-bubble.them {
      background-color: var(--bubble-them);
      color: #333;
      border-bottom-left-radius: 4px;
      align-self: flex-start;
    }
    
    .message-time {
      font-size: 11px;
      margin-top: 5px;
      text-align: right;
    }
    
    .message-bubble.me .message-time {
      color: rgba(255, 255, 255, 0.8);
    }
    
    .message-bubble.them .message-time {
      color: #8a96a3;
    }
    
    .chat-input-container {
      padding: 15px;
      background-color: white;
      border-top: 1px solid #e0e0e0;
    }
    
    .chat-input {
      border-radius: 24px;
      resize: none;
      overflow: hidden;
      padding-right: 45px;
      height: 48px;
    }
    
    .send-button {
      position: absolute;
      right: 8px;
      bottom: 8px;
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    /* Responsive fixes */
    @media (max-width: 768px) {
      .content-sidebar {
        width: 100% !important;
        display: none;
      }
      
      .show-sidebar .content-sidebar {
        display: block;
      }
      
      .show-sidebar .content-area {
        display: none !important;
      }
    }
    
    /* Emoji picker styles */
    .emoji-picker {
      position: absolute;
      bottom: 100%;
      left: 0;
      background: white;
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 10px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 1000;
      max-width: 300px;
    }
    
    .emoji-grid {
      display: grid;
      grid-template-columns: repeat(8, 1fr);
      gap: 5px;
      max-height: 200px;
      overflow-y: auto;
    }
    
    .emoji-grid span {
      cursor: pointer;
      padding: 5px;
      border-radius: 4px;
      text-align: center;
      font-size: 20px;
      transition: background-color 0.2s;
    }
    
    .emoji-grid span:hover {
      background-color: #f0f0f0;
    }
    
    /* File upload styles */
    .file-upload-progress {
      margin-top: 10px;
      padding: 10px;
      background: #f8f9fa;
      border-radius: 4px;
      border: 1px solid #dee2e6;
    }
    
    .file-preview {
      margin-top: 10px;
      padding: 10px;
      background: #e9ecef;
      border-radius: 4px;
      border: 1px solid #ced4da;
    }
    
    .file-preview img {
      max-width: 100px;
      max-height: 100px;
      border-radius: 4px;
    }
    
    .file-preview .file-info {
      margin-top: 5px;
      font-size: 12px;
      color: #6c757d;
    }
    
    /* Media message styles */
    .media-message {
      margin-bottom: 8px;
    }
    
    .message-image {
      max-width: 200px;
      max-height: 200px;
      border-radius: 8px;
      cursor: pointer;
      transition: transform 0.2s;
    }
    
    .message-image:hover {
      transform: scale(1.05);
    }
    
    .message-video {
      max-width: 250px;
      max-height: 200px;
      border-radius: 8px;
      cursor: pointer;
    }
    
    .message-audio {
      width: 250px;
      height: 40px;
    }
    
    .document-preview, .generic-media {
      display: flex;
      align-items: center;
      padding: 12px;
      background: #f8f9fa;
      border: 1px solid #dee2e6;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    
    .document-preview:hover, .generic-media:hover {
      background: #e9ecef;
    }
    
    .document-info, .media-info {
      margin-left: 12px;
      flex: 1;
    }
    
    .media-caption {
      margin-top: 8px;
      font-size: 14px;
      color: #6c757d;
      font-style: italic;
    }
    
    /* Media viewer modal */
    .media-viewer-modal {
      display: none;
      position: fixed;
      z-index: 9999;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.9);
    }
    
    .media-viewer-content {
      margin: auto;
      display: block;
      max-width: 90%;
      max-height: 90%;
      margin-top: 5%;
    }
    
    .media-viewer-close {
      position: absolute;
      top: 15px;
      right: 35px;
      color: #f1f1f1;
      font-size: 40px;
      font-weight: bold;
      cursor: pointer;
    }
    
    .media-viewer-close:hover {
      color: #bbb;
    }
  </style>
  
  <script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>
  <script>
    // Get token from global scope (defined in main.ejs)
    const token = localStorage.getItem('token');
    if (!token) {
        console.error('‚ùå No token found, redirecting to login');
        window.location.href = '/auth/login';
    }
    
    const urlParams = new URLSearchParams(window.location.search);
    const sessionId = urlParams.get('id');
  
    // Debug: Log session ID
    console.log('üîç Session ID from URL:', sessionId);
    console.log('üîç Current URL:', window.location.href);
    console.log('üîë Token available:', !!token);
    
        // Initialize WebSocket connection
    let socket;
    
    // Fallback apiCall function if global one is not available
    function createFallbackApiCall() {
        console.log('üîÑ Creating fallback apiCall function');
        return async (url, options = {}) => {
            // Use the token from global scope, don't redeclare
            const headers = {
                'Content-Type': 'application/json',
                ...options.headers
            };
            
            if (token) {
                headers['Authorization'] = `Bearer ${token}`;
            }

            // Use dynamic base URL if available, otherwise fallback to relative URL
            let fullUrl;
            if (window.AppConfig && window.AppConfig.apiBaseUrl) {
                // If URL already starts with /api, remove it to avoid duplication
                if (url.startsWith('/api/')) {
                    fullUrl = `${window.AppConfig.apiBaseUrl}${url.substring(4)}`;
                } else if (url.startsWith('/')) {
                    fullUrl = `${window.AppConfig.apiBaseUrl}${url}`;
      } else {
                    fullUrl = `${window.AppConfig.apiBaseUrl}/${url}`;
                }
            } else {
                fullUrl = url;
            }
            
            console.log('üîó Fallback - Original URL:', url);
            console.log('üîó Fallback - Full URL:', fullUrl);

            const response = await fetch(fullUrl, {
                ...options,
                headers
            });

            if (response.status === 401) {
                localStorage.removeItem('token');
                window.location.href = '/auth/login';
                return;
            }

            return response;
        };
    }
    
    // Function to check prerequisites
    function checkPrerequisites() {
        if (!token) {
            console.error('‚ùå No token available');
            return false;
        }
        
        // Check if global apiCall is available, if not create fallback
        if (typeof window.apiCall !== 'function') {
            console.warn('‚ö†Ô∏è Global apiCall function not available, creating fallback');
            window.apiCall = createFallbackApiCall();
            console.log('‚úÖ Fallback apiCall function created');
        }
        
        if (!sessionId) {
            console.error('‚ùå No session ID in URL');
            return false;
        }
        
        console.log('‚úÖ All prerequisites met');
        return true;
    }
    
    function initWebSocket() {
      // Get socket.io from CDN or local
      if (typeof io !== 'undefined') {
        socket = io();
        
        socket.on('connect', () => {
          console.log('üîå WebSocket connected:', socket.id);
          // Join session room
          socket.emit('join-session', sessionId);
          showToast('Real-time connection established!', 'success');
          playSuccessSound();
        });
        
        socket.on('disconnect', () => {
          console.log('üîå WebSocket disconnected');
          showToast('Real-time connection lost. Reconnecting...', 'warning');
          playErrorSound();
        });
        
        socket.on('new-message', (messageData) => {
          console.log('üì® Real-time message received:', messageData);
          handleRealTimeMessage(messageData);
        });
        
        socket.on('message-status', (statusData) => {
          console.log('üìä Message status update:', statusData);
          updateMessageStatus(statusData);
        });
        
      } else {
        console.warn('‚ö†Ô∏è Socket.io not available, falling back to auto-refresh');
        // Fallback to auto-refresh if WebSocket not available
        if (currentContactId) {
          startAutoRefresh(currentContactId);
        } else {
          console.log('üì± No contact selected yet, auto-refresh will start when chat is opened');
        }
      }
    }
    
    // Audio notification functions
    function playNotificationSound() {
      // Try to play external audio file first
      try {
      const audio = new Audio('/assets/sounds/message.mp3');
        audio.volume = 0.5;
        audio.play().catch(() => {
          // Fallback to Web Audio API
          if (window.AudioManager) {
            window.AudioManager.playMessage();
          }
        });
      } catch (error) {
        // Fallback to Web Audio API
        if (window.AudioManager) {
          window.AudioManager.playMessage();
        }
      }
    }

    function playGeneralNotification() {
      if (window.AudioManager) {
        window.AudioManager.playNotification();
      }
    }

    function playSuccessSound() {
      if (window.AudioManager) {
        window.AudioManager.playSuccess();
      }
    }

    function playErrorSound() {
      if (window.AudioManager) {
        window.AudioManager.playError();
      }
    }
  
    let currentContactId = null;
    let currentContactName = null;
    let currentSessionId = sessionId; // Add this line
    let allChats = [];
  
    async function loadChatList() {
      try {
        // Check prerequisites again
        if (!checkPrerequisites()) {
          throw new Error('Prerequisites not met');
        }
        
      const container = document.getElementById('chat-list');
        if (!container) {
          throw new Error('Chat list container not found');
        }
        
      container.innerHTML = `
        <div class="d-flex justify-content-center align-items-center p-4">
          <div class="spinner-border text-primary" role="status" style="width: 1.5rem; height: 1.5rem;">
            <span class="visually-hidden">Memuat...</span>
          </div>
          <span class="ms-2 text-muted">Memuat daftar chat...</span>
        </div>
      `;
  
        console.log('üîÑ Loading chat list for session:', sessionId);
        const res = await apiCall(`/api/whatsapp/${sessionId}/chats`);
        console.log('üì° Response received:', res);
    
        if (!res.ok) {
          throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        }
  
        const data = await res.json();
        console.log('üìä Chat data:', data);
        allChats = data.chats || [];
        
        if (!data.success || data.chats.length === 0) {
          container.innerHTML = `
            <div class="text-center p-5">
              <i class="bi bi-chat-left-text" style="font-size: 48px; color: #e2e8f0;"></i>
              <p class="mt-3 text-muted">Tidak ada chat ditemukan</p>
            </div>
          `;
          return;
        }
  
        renderChatList(data.chats);
  
      } catch (error) {
        console.error('‚ùå Error loading chat list:', error);
        const container = document.getElementById('chat-list');
        if (container) {
        container.innerHTML = `
          <div class="alert alert-danger mx-3 my-4">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
              Gagal memuat chat: ${error.message}
          </div>
        `;
        }
        showToast('Gagal memuat daftar chat: ' + error.message, 'error');
      }
    }
    
    function renderChatList(chats) {
      const container = document.getElementById('chat-list');
      container.innerHTML = '';
      
      chats.forEach(chat => {
        const item = document.createElement('div');
        item.className = `p-3 d-flex position-relative border-bottom c-pointer single-item ${currentContactId === chat.id ? 'active' : ''}`;
        item.style.cursor = 'pointer';
        
        const initial = (chat.name || '?')[0].toUpperCase();
        
        item.innerHTML = `
          <div class="avatar-container position-relative">
          <div class="avatar-image">
            ${initial}
            </div>
            <!-- Unread badge will be added here dynamically -->
          </div>
          <div class="ms-3 item-desc flex-grow-1">
            <div class="w-100 d-flex align-items-center justify-content-between">
              <div class="fw-medium text-truncate" style="max-width: 70%;">
                ${chat.name || '(Tanpa Nama)'}
              </div>
              <div class="time-badge">
                ${getCurrentTime()}
              </div>
            </div>
            <div class="d-flex justify-content-between align-items-center mt-1">
              <p class="small text-muted mb-0 text-truncate last-message" style="max-width: 85%;">
                ${chat.id}
              </p>
            </div>
          </div>
        `;
        
        // Add data attribute for easy selection
        item.setAttribute('data-contact-id', chat.id);
        
        item.onclick = () => {
          document.querySelectorAll('.single-item').forEach(el => el.classList.remove('active'));
          item.classList.add('active');
          loadChatMessages(chat.id, chat.name);
        };
        
        container.appendChild(item);
      });
    }
    
    function getCurrentTime() {
      const now = new Date();
      return now.getHours().toString().padStart(2, '0') + ':' + 
             now.getMinutes().toString().padStart(2, '0');
    }
  
    async function loadChatMessages(contactId, contactName) {
      // Stop auto-refresh for previous chat
      stopAutoRefresh();
      
      // Clear unread indicator for this contact
      clearUnreadIndicator(contactId);
      
      currentContactId = contactId;
      currentContactName = contactName;
      currentSessionId = sessionId; // Ensure currentSessionId is set
      
      console.log('üì± Chat loaded:', {
        contactId,
        contactName,
        currentSessionId,
        sessionId
      });
      
      const panel = document.getElementById('chat-panel');
      panel.innerHTML = `
        <div class="d-flex justify-content-center align-items-center h-100">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Memuat pesan...</span>
          </div>
          <span class="ms-2 text-muted">Memuat pesan...</span>
        </div>
      `;
  
      try {
        const res = await apiCall(`/api/whatsapp/${sessionId}/chats/${contactId}`);
        const data = await res.json();
  
        if (!data.success) {
          panel.innerHTML = `
            <div class="d-flex flex-column justify-content-center align-items-center h-100">
              <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                Gagal memuat obrolan
              </div>
            </div>
          `;
          return;
        }
  
        let messagesHTML = '';
        
        if (data.messages.length === 0) {
          messagesHTML = `
            <div class="text-center my-5 py-5">
              <i class="bi bi-chat" style="font-size: 48px; color: #e2e8f0;"></i>
              <p class="mt-3 text-muted">Belum ada pesan</p>
            </div>
          `;
        } else {
          messagesHTML = data.messages.map(msg => {
            const time = new Date(msg.timestamp * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
            
            let messageContent = '';
            
            // Handle different message types
            if (msg.hasMedia) {
              if (msg.type === 'image') {
                messageContent = `
                  <div class="media-message">
                    <img src="data:image/jpeg;base64,${msg.mediaData || ''}" alt="Image" class="message-image" onclick="openMediaViewer(this.src, '${msg.body || 'Image'}')">
                    ${msg.body ? `<div class="media-caption text-white">${msg.body}</div>` : ''}
                  </div>
                `;
              } else if (msg.type === 'document') {
                messageContent = `
                  <div class="media-message">
                    <div class="document-preview" onclick="downloadDocument('${msg.mediaData || ''}', '${msg.body || 'Document'}')">
                      <i class="bi bi-file-earmark-text fs-1 text-primary"></i>
                      <div class="document-info">
                        <strong>Document</strong>
                        <small class="text-muted">Click to download</small>
                      </div>
                    </div>
                  </div>
                `;
              } else if (msg.type === 'video') {
                messageContent = `
                  <div class="media-message">
                    <video controls class="message-video" onclick="openMediaViewer(this.src, '${msg.body || 'Video'}')">
                      <source src="data:video/mp4;base64,${msg.mediaData || ''}" type="video/mp4">
                      Your browser does not support the video tag.
                    </video>
                    ${msg.body ? `<div class="media-caption">${msg.body}</div>` : ''}
                  </div>
                `;
              } else if (msg.type === 'audio') {
                messageContent = `
                  <div class="media-message">
                    <audio controls class="message-audio">
                      <source src="data:audio/mp3;base64,${msg.mediaData || ''}" type="audio/mpeg">
                      Your browser does not support the audio tag.
                    </audio>
                    ${msg.body ? `<div class="media-caption">${msg.body}</div>` : ''}
                  </div>
                `;
              } else {
                // Generic media message
                messageContent = `
                  <div class="media-message">
                    <div class="generic-media" onclick="downloadMedia('${msg.mediaData || ''}', '${msg.body || 'Media'}')">
                      <i class="bi bi-file-earmark fs-1 text-primary"></i>
                      <div class="media-info">
                        <strong>Media File</strong>
                        <small class="text-muted">Click to download</small>
                      </div>
                    </div>
                  </div>
                `;
              }
            } else {
              // Text message
              messageContent = `<div class="message-content">${msg.body}</div>`;
            }
            
            return `
              <div class="message-bubble ${msg.fromMe ? 'me' : 'them'}">
                ${messageContent}
                <div class="message-time">${time}</div>
              </div>
            `;
          }).join('');
        }
  
        panel.innerHTML = `
          <div class="chat-header d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
            <div class="avatar-image me-3">
              ${(contactName || '?')[0].toUpperCase()}
            </div>
            <div>
              <h6 class="mb-0 fw-bold">${contactName || 'Tanpa Nama'}</h6>
              <div class="small text-muted">${contactId}</div>
              </div>
            </div>
            <div class="d-flex gap-2">
              <!-- Audio Controls -->
              <div class="btn-group btn-group-sm" role="group">
                <button class="btn btn-outline-success" onclick="toggleAudio()" id="audioToggle" title="Toggle Audio">
                  <i class="bi bi-volume-up"></i>
                </button>
                <button class="btn btn-outline-info" onclick="testAudio()" title="Test Audio">
                  <i class="bi bi-music-note"></i>
                </button>
              </div>
              <!-- Chat Controls -->
              <button class="btn btn-sm btn-outline-primary" onclick="refreshChatMessages('${contactId}')" title="Refresh messages">
                <i class="bi bi-arrow-clockwise"></i>
              </button>
              <button class="btn btn-sm btn-outline-secondary" onclick="toggleAutoRefresh()" id="autoRefreshToggle" title="Toggle auto-refresh">
                <i class="bi bi-play-fill"></i>
              </button>
              <button class="btn btn-sm btn-outline-info" onclick="testUnreadIndicator('${contactId}')" title="Test unread indicator">
                <i class="bi bi-bell"></i>
              </button>
            </div>
          </div>
          
          <div class="chat-messages" id="messages-container">
            ${messagesHTML}
          </div>
          
          <div class="chat-input-container">
            <div class="position-relative">
              <div class="input-group">
                <button class="btn btn-outline-secondary" type="button" onclick="toggleEmojiPicker('${contactId}')">
                  <i class="bi bi-emoji-smile"></i>
                </button>
                <button class="btn btn-outline-secondary" type="button" onclick="openFileInput('${contactId}')">
                  <i class="bi bi-paperclip"></i>
                </button>
              <textarea id="messageInput-${contactId}" class="form-control chat-input" rows="1" placeholder="Ketik pesan..."></textarea>
              <button class="btn btn-primary send-button" onclick="sendMessage('${contactId}')">
                <i class="bi bi-send-fill"></i>
              </button>
              </div>
              
                      <!-- Hidden file input -->
        <input type="file" id="fileInput-${contactId}" style="display: none;" accept="image/*,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,text/plain,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" onchange="handleFileSelect(event, '${contactId}')">
              
              <!-- Emoji picker -->
              <div id="emojiPicker-${contactId}" class="emoji-picker" style="display: none;">
                <div class="emoji-grid">
                  <span onclick="insertEmoji('üòÄ', '${contactId}')">üòÄ</span>
                  <span onclick="insertEmoji('üòÉ', '${contactId}')">üòÉ</span>
                  <span onclick="insertEmoji('üòÑ', '${contactId}')">üòÑ</span>
                  <span onclick="insertEmoji('üòÅ', '${contactId}')">üòÅ</span>
                  <span onclick="insertEmoji('üòÜ', '${contactId}')">üòÜ</span>
                  <span onclick="insertEmoji('üòÖ', '${contactId}')">üòÖ</span>
                  <span onclick="insertEmoji('ü§£', '${contactId}')">ü§£</span>
                  <span onclick="insertEmoji('üòÇ', '${contactId}')">üòÇ</span>
                  <span onclick="insertEmoji('üôÇ', '${contactId}')">üôÇ</span>
                  <span onclick="insertEmoji('üôÉ', '${contactId}')">üôÉ</span>
                  <span onclick="insertEmoji('üòâ', '${contactId}')">üòâ</span>
                  <span onclick="insertEmoji('üòä', '${contactId}')">üòä</span>
                  <span onclick="insertEmoji('üòá', '${contactId}')">üòá</span>
                  <span onclick="insertEmoji('ü•∞', '${contactId}')">ü•∞</span>
                  <span onclick="insertEmoji('üòç', '${contactId}')">üòç</span>
                  <span onclick="insertEmoji('ü§©', '${contactId}')">ü§©</span>
                  <span onclick="insertEmoji('üòò', '${contactId}')">üòò</span>
                  <span onclick="insertEmoji('üòó', '${contactId}')">üòó</span>
                  <span onclick="insertEmoji('üòö', '${contactId}')">üòö</span>
                  <span onclick="insertEmoji('üòô', '${contactId}')">üòô</span>
                  <span onclick="insertEmoji('ü•≤', '${contactId}')">ü•≤</span>
                  <span onclick="insertEmoji('üòã', '${contactId}')">üòã</span>
                  <span onclick="insertEmoji('üòõ', '${contactId}')">üòõ</span>
                  <span onclick="insertEmoji('üòú', '${contactId}')">üòú</span>
                  <span onclick="insertEmoji('ü§™', '${contactId}')">ü§™</span>
                  <span onclick="insertEmoji('üòù', '${contactId}')">üòù</span>
                  <span onclick="insertEmoji('ü§ë', '${contactId}')">ü§ë</span>
                  <span onclick="insertEmoji('ü§ó', '${contactId}')">ü§ó</span>
                  <span onclick="insertEmoji('ü§≠', '${contactId}')">ü§≠</span>
                  <span onclick="insertEmoji('ü§´', '${contactId}')">ü§´</span>
                  <span onclick="insertEmoji('ü§î', '${contactId}')">ü§î</span>
                  <span onclick="insertEmoji('ü§ê', '${contactId}')">ü§ê</span>
                  <span onclick="insertEmoji('ü§®', '${contactId}')">ü§®</span>
                  <span onclick="insertEmoji('üßê', '${contactId}')">üßê</span>
                  <span onclick="insertEmoji('ü§ì', '${contactId}')">ü§ì</span>
                  <span onclick="insertEmoji('üòé', '${contactId}')">üòé</span>
                  <span onclick="insertEmoji('ü§©', '${contactId}')">ü§©</span>
                  <span onclick="insertEmoji('ü•≥', '${contactId}')">ü•≥</span>
                  <span onclick="insertEmoji('ü•∏', '${contactId}')">ü•∏</span>
                  <span onclick="insertEmoji('ü•∫', '${contactId}')">ü•∫</span>
                  <span onclick="insertEmoji('üòè', '${contactId}')">üòè</span>
                  <span onclick="insertEmoji('üòí', '${contactId}')">üòí</span>
                  <span onclick="insertEmoji('üòû', '${contactId}')">üòû</span>
                  <span onclick="insertEmoji('üòî', '${contactId}')">üòî</span>
                  <span onclick="insertEmoji('üòü', '${contactId}')">üòü</span>
                  <span onclick="insertEmoji('üòï', '${contactId}')">üòï</span>
                  <span onclick="insertEmoji('üôÅ', '${contactId}')">üôÅ</span>
                  <span onclick="insertEmoji('‚òπÔ∏è', '${contactId}')">‚òπÔ∏è</span>
                  <span onclick="insertEmoji('üò£', '${contactId}')">üò£</span>
                  <span onclick="insertEmoji('üòñ', '${contactId}')">üòñ</span>
                  <span onclick="insertEmoji('üò´', '${contactId}')">üò´</span>
                  <span onclick="insertEmoji('üò©', '${contactId}')">üò©</span>
                  <span onclick="insertEmoji('ü•∫', '${contactId}')">ü•∫</span>
                  <span onclick="insertEmoji('üò¢', '${contactId}')">üò¢</span>
                  <span onclick="insertEmoji('üò≠', '${contactId}')">üò≠</span>
                  <span onclick="insertEmoji('üò§', '${contactId}')">üò§</span>
                  <span onclick="insertEmoji('üò†', '${contactId}')">üò†</span>
                  <span onclick="insertEmoji('üò°', '${contactId}')">üò°</span>
                  <span onclick="insertEmoji('ü§¨', '${contactId}')">ü§¨</span>
                  <span onclick="insertEmoji('ü§Ø', '${contactId}')">ü§Ø</span>
                  <span onclick="insertEmoji('üò≥', '${contactId}')">üò≥</span>
                  <span onclick="insertEmoji('ü•µ', '${contactId}')">ü•µ</span>
                  <span onclick="insertEmoji('ü•∂', '${contactId}')">ü•∂</span>
                  <span onclick="insertEmoji('üò±', '${contactId}')">üò±</span>
                  <span onclick="insertEmoji('üò®', '${contactId}')">üò®</span>
                  <span onclick="insertEmoji('üò∞', '${contactId}')">üò∞</span>
                  <span onclick="insertEmoji('üò•', '${contactId}')">üò•</span>
                  <span onclick="insertEmoji('üòì', '${contactId}')">üòì</span>
                  <span onclick="insertEmoji('ü§ó', '${contactId}')">ü§ó</span>
                  <span onclick="insertEmoji('ü§î', '${contactId}')">ü§î</span>
                  <span onclick="insertEmoji('ü§≠', '${contactId}')">ü§≠</span>
                  <span onclick="insertEmoji('ü§´', '${contactId}')">ü§´</span>
                  <span onclick="insertEmoji('ü§•', '${contactId}')">ü§•</span>
                  <span onclick="insertEmoji('üò∂', '${contactId}')">üò∂</span>
                  <span onclick="insertEmoji('üòê', '${contactId}')">üòê</span>
                  <span onclick="insertEmoji('üòë', '${contactId}')">üòë</span>
                  <span onclick="insertEmoji('üòØ', '${contactId}')">üòØ</span>
                  <span onclick="insertEmoji('üò¶', '${contactId}')">üò¶</span>
                  <span onclick="insertEmoji('üòß', '${contactId}')">üòß</span>
                  <span onclick="insertEmoji('üòÆ', '${contactId}')">üòÆ</span>
                  <span onclick="insertEmoji('üò≤', '${contactId}')">üò≤</span>
                  <span onclick="insertEmoji('ü•±', '${contactId}')">ü•±</span>
                  <span onclick="insertEmoji('üò¥', '${contactId}')">üò¥</span>
                  <span onclick="insertEmoji('ü§§', '${contactId}')">ü§§</span>
                  <span onclick="insertEmoji('üò™', '${contactId}')">üò™</span>
                  <span onclick="insertEmoji('üòµ', '${contactId}')">üòµ</span>
                  <span onclick="insertEmoji('ü§ê', '${contactId}')">ü§ê</span>
                  <span onclick="insertEmoji('ü•¥', '${contactId}')">ü•¥</span>
                  <span onclick="insertEmoji('ü§¢', '${contactId}')">ü§¢</span>
                  <span onclick="insertEmoji('ü§Æ', '${contactId}')">ü§Æ</span>
                  <span onclick="insertEmoji('ü§ß', '${contactId}')">ü§ß</span>
                  <span onclick="insertEmoji('üò∑', '${contactId}')">üò∑</span>
                  <span onclick="insertEmoji('ü§í', '${contactId}')">ü§í</span>
                  <span onclick="insertEmoji('ü§ï', '${contactId}')">ü§ï</span>
                </div>
              </div>
            </div>
          </div>
        `;
  
        // Auto resize textarea
        const textarea = document.getElementById(`messageInput-${contactId}`);
        if (textarea) {
          textarea.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight < 120 ? this.scrollHeight : 120) + 'px';
          });
          
          // Enter to send, Shift+Enter for newline
          textarea.addEventListener('keydown', function(e) {
            if (e.keyCode === 13 && !e.shiftKey) {
              e.preventDefault();
              sendMessage(contactId);
            }
          });
        }
  
        // Scroll to bottom
        setTimeout(() => {
          const messagesContainer = document.getElementById('messages-container');
          if (messagesContainer) messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }, 100);
        
        // Start auto-refresh for this chat (fallback)
        startAutoRefresh(contactId);
        
        // Join session room for real-time updates
        if (socket && socket.connected) {
          socket.emit('join-session', sessionId);
          console.log('üì± Joined session room:', sessionId);
        }
        
        // Debug: Log current state
        console.log('‚úÖ Chat loaded for:', contactId);
        console.log('üîÑ Auto-refresh started for:', contactId);
  
      } catch (err) {
        console.error(err);
        panel.innerHTML = `
          <div class="d-flex flex-column justify-content-center align-items-center h-100">
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle-fill me-2"></i>
              Terjadi kesalahan saat memuat pesan
            </div>
          </div>
        `;
      }
    }
  
    async function sendMessage(contactId) {
      const input = document.getElementById(`messageInput-${contactId}`);
      const message = input.value;
      if (!message.trim()) return;
  
      try {
        // Show sending indicator
        const sendButton = input.nextElementSibling;
        const originalIcon = sendButton.innerHTML;
        sendButton.innerHTML = '<i class="bi bi-hourglass-split"></i>';
        sendButton.disabled = true;
  
                const res = await apiCall(`/api/whatsapp/${sessionId}/chats/${contactId}`, {
          method: 'POST',
          body: JSON.stringify({ message })
        });

        // Check if response is ok
        if (!res.ok) {
          console.error('‚ùå HTTP Error:', res.status, res.statusText);
          const errorText = await res.text();
          console.error('‚ùå Error response:', errorText);
          
          // Try to parse as JSON if possible
          let errorData;
          try {
            errorData = JSON.parse(errorText);
          } catch (e) {
            errorData = { message: `HTTP ${res.status}: ${res.statusText}` };
          }
          
          throw new Error(errorData.message || `HTTP ${res.status}: ${res.statusText}`);
        }
  
        const data = await res.json();
        console.log('üì® Send message response:', data);
        
        if (data.success) {
          // Clear input
          input.value = '';
          input.style.height = 'auto';
          
          // Add sent message to UI immediately (optimistic update)
          addMessageToUI(contactId, message, true, Date.now());
          
          // Play success sound for sent message
          playSuccessSound();
          
          // Refresh messages to get any replies
          setTimeout(() => {
            refreshChatMessages(contactId);
          }, 1000);
          
          // Update chat list to show latest message
          updateChatListWithLatestMessage(contactId, message);
        } else {
          showToast(data.message || 'Gagal mengirim pesan', 'error');
          playErrorSound();
        }
      } catch (err) {
          console.error('‚ùå Error in sendMessage:', err);
          
          // Show more specific error message
          let errorMessage = 'Terjadi kesalahan saat mengirim pesan';
          if (err.message) {
            if (err.message.includes('serialize')) {
              errorMessage = 'Pesan terkirim tapi ada masalah teknis (serialize error)';
            } else if (err.message.includes('timeout')) {
              errorMessage = 'Pesan timeout, coba kirim lagi';
            } else if (err.message.includes('500')) {
              errorMessage = 'Server error, coba refresh halaman';
            }
          }
          
          showToast(errorMessage, 'error');
          playErrorSound();
        } finally {
        // Restore send button
        const sendButton = input.nextElementSibling;
        sendButton.innerHTML = '<i class="bi bi-send-fill"></i>';
        sendButton.disabled = false;
      }
    }
    
    // Add message to UI immediately (optimistic update)
    function addMessageToUI(contactId, message, isFromMe, timestamp) {
      const messagesContainer = document.getElementById('messages-container');
      if (!messagesContainer) return;
      
      const time = new Date(timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
      const messageHTML = `
        <div class="message-bubble ${isFromMe ? 'me' : 'them'}">
          <div class="message-content">${message}</div>
          <div class="message-time">${time}</div>
        </div>
      `;
      
      messagesContainer.insertAdjacentHTML('beforeend', messageHTML);
      
      // Scroll to bottom
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    // Refresh chat messages without full reload
    async function refreshChatMessages(contactId) {
      try {
        console.log('üîÑ Refreshing messages for contact:', contactId);
        
        const res = await apiCall(`/api/whatsapp/${sessionId}/chats/${contactId}`);
        const data = await res.json();
  
        if (data.success && data.messages.length > 0) {
          // Get current messages count
          const currentMessages = document.querySelectorAll('#messages-container .message-bubble');
          const newMessagesCount = data.messages.length - currentMessages.length;
          
          console.log(`üìä Current messages: ${currentMessages.length}, Total from API: ${data.messages.length}, New: ${newMessagesCount}`);
          
          if (newMessagesCount > 0) {
            // Add only new messages
            const messagesContainer = document.getElementById('messages-container');
            const newMessages = data.messages.slice(-newMessagesCount);
            
            console.log('üì® Adding new messages:', newMessages);
            
            newMessages.forEach(msg => {
              const time = new Date(msg.timestamp * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
              
              let messageContent = '';
              
              // Handle different message types
              if (msg.hasMedia) {
                if (msg.type === 'image') {
                  messageContent = `
                    <div class="media-message">
                      <img src="data:image/jpeg;base64,${msg.mediaData || ''}" alt="Image" class="message-image" onclick="openMediaViewer(this.src, '${msg.body || 'Image'}')">
                      ${msg.body ? `<div class="media-caption">${msg.body}</div>` : ''}
                    </div>
                  `;
                } else if (msg.type === 'document') {
                  messageContent = `
                    <div class="media-message">
                      <div class="document-preview" onclick="downloadDocument('${msg.mediaData || ''}', '${msg.body || 'Document'}')">
                        <i class="bi bi-file-earmark-text fs-1 text-primary"></i>
                        <div class="document-info">
                          <strong>Document</strong>
                          <small class="text-muted">Click to download</small>
                        </div>
                      </div>
                    </div>
                  `;
                } else if (msg.type === 'video') {
                  messageContent = `
                    <div class="media-message">
                      <video controls class="message-video" onclick="openMediaViewer(this.src, '${msg.body || 'Video'}')">
                        <source src="data:video/mp4;base64,${msg.base64 || ''}" type="video/mp4">
                        Your browser does not support the video tag.
                      </video>
                      ${msg.body ? `<div class="media-caption">${msg.body}</div>` : ''}
                    </div>
                  `;
                } else if (msg.type === 'audio') {
                  messageContent = `
                    <div class="media-message">
                      <audio controls class="message-audio">
                        <source src="data:audio/mp3;base64,${msg.base64 || ''}" type="audio/mpeg">
                        Your browser does not support the audio tag.
                      </audio>
                      ${msg.body ? `<div class="media-caption">${msg.body}</div>` : ''}
                    </div>
                  `;
                } else {
                  // Generic media message
                  messageContent = `
                    <div class="media-message">
                      <div class="generic-media" onclick="downloadMedia('${msg.base64 || ''}', '${msg.body || 'Media'}')">
                        <i class="bi bi-file-earmark fs-1 text-primary"></i>
                        <div class="media-info">
                          <strong>Media File</strong>
                          <small class="text-muted">Click to download</small>
                        </div>
                      </div>
                    </div>
                  `;
                }
              } else {
                // Text message
                messageContent = `<div class="message-content">${msg.body}</div>`;
              }
              
              const messageHTML = `
                <div class="message-bubble ${msg.fromMe ? 'me' : 'them'}">
                  ${messageContent}
                  <div class="message-time">${time}</div>
                </div>
              `;
              
              messagesContainer.insertAdjacentHTML('beforeend', messageHTML);
            });
            
            // Scroll to bottom for new messages
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            
            // Show notification for new messages
            if (newMessages.some(msg => !msg.fromMe)) {
              showToast('Pesan baru diterima!', 'info');
              // Update chat list to show unread indicator
              updateChatListUnreadIndicator(contactId, true);
              // Play notification sound for new messages
              playNotificationSound();
            }
          }
        }
      } catch (err) {
        console.error('Error refreshing messages:', err);
      }
    }
    
    // Update chat list with latest message
    function updateChatListWithLatestMessage(contactId, message) {
      const chatItem = document.querySelector(`[data-contact-id="${contactId}"]`);
      if (chatItem) {
        const lastMessageElement = chatItem.querySelector('.last-message');
        if (lastMessageElement) {
          lastMessageElement.textContent = message.length > 30 ? message.substring(0, 30) + '...' : message;
        }
        
        const timeElement = chatItem.querySelector('.time-badge');
        if (timeElement) {
          timeElement.textContent = 'now';
        }
        
        // Update last message time
        const lastMessageTime = chatItem.querySelector('.last-message-time');
        if (lastMessageTime) {
          lastMessageTime.textContent = 'now';
        }
      }
    }
    
    // Update unread indicator in chat list
    function updateChatListUnreadIndicator(contactId, hasUnread) {
      const chatItem = document.querySelector(`[data-contact-id="${contactId}"]`);
      if (chatItem) {
        let unreadBadge = chatItem.querySelector('.unread-badge');
        
        if (hasUnread && !unreadBadge) {
          // Create unread badge if it doesn't exist
          unreadBadge = document.createElement('div');
          unreadBadge.className = 'unread-badge';
          unreadBadge.textContent = '1';
          
          // Add to chat item
          const avatarContainer = chatItem.querySelector('.avatar-container');
          if (avatarContainer) {
            avatarContainer.appendChild(unreadBadge);
          }
        } else if (unreadBadge && !hasUnread) {
          // Remove unread badge if no unread messages
          unreadBadge.remove();
        } else if (unreadBadge && hasUnread) {
          // Update unread count
          const currentCount = parseInt(unreadBadge.textContent) || 0;
          unreadBadge.textContent = currentCount + 1;
        }
      }
    }
    
    // Clear unread indicator when chat is opened
    function clearUnreadIndicator(contactId) {
      updateChatListUnreadIndicator(contactId, false);
    }
    
    // Test function for unread indicator
    function testUnreadIndicator(contactId) {
      console.log('üß™ Testing unread indicator for:', contactId);
      updateChatListUnreadIndicator(contactId, true);
      showToast('Test: Unread indicator added!', 'info');
    }

    // Audio control functions
    function toggleAudio() {
      if (window.AudioManager) {
        const isEnabled = window.AudioManager.isEnabled;
        window.AudioManager.setEnabled(!isEnabled);
        
        // Update button appearance
        const audioToggle = document.getElementById('audioToggle');
        if (audioToggle) {
          if (!isEnabled) {
            audioToggle.innerHTML = '<i class="bi bi-volume-mute"></i>';
            audioToggle.className = 'btn btn-outline-danger';
            showToast('Audio enabled!', 'success');
          } else {
            audioToggle.innerHTML = '<i class="bi bi-volume-up"></i>';
            audioToggle.className = 'btn btn-outline-success';
            showToast('Audio disabled!', 'info');
          }
        }
      }
    }

    function testAudio() {
      if (window.AudioManager) {
        window.AudioManager.testSounds();
        showToast('Testing all audio sounds...', 'info');
      } else {
        showToast('Audio Manager not available', 'error');
      }
    }
    

    
    // Handle real-time incoming messages
    function handleRealTimeMessage(messageData) {
      const { contactId, message, fromMe, timestamp, sessionId } = messageData;
      
      console.log('üì® handleRealTimeMessage called with:', {
        contactId,
        message: message.substring(0, 50) + '...',
        fromMe,
        timestamp,
        sessionId,
        currentSessionId,
        currentContactId
      });
      
      // Check if this message is for current session
      if (sessionId !== currentSessionId) {
        console.log('üì± Message for different session, ignoring');
        return;
      }
      
      // Check if this message is for current contact
      if (contactId === currentContactId) {
        // Add message to current chat
        addMessageToUI(contactId, message, fromMe, timestamp * 1000);
        showToast('Pesan baru diterima!', 'info');
        
        // Play message sound for current chat
        playNotificationSound();
      } else {
        // Update unread indicator for other contacts
        updateChatListUnreadIndicator(contactId, true);
        showToast(`Pesan baru dari ${contactId}`, 'info');
        
        // Play notification sound for other contacts
        playGeneralNotification();
      }
      
      // Update chat list with latest message
      updateChatListWithLatestMessage(contactId, message);
    }
    
    // Update message status (delivered, read, etc.)
    function updateMessageStatus(statusData) {
      const { messageId, status } = statusData;
      const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
      
      if (messageElement) {
        const statusElement = messageElement.querySelector('.message-status');
        if (statusElement) {
          statusElement.textContent = status;
          statusElement.className = `message-status status-${status}`;
        }
      }
    }
    
    // Auto-refresh messages every 10 seconds (fallback)
    let autoRefreshInterval;
    function startAutoRefresh(contactId) {
      if (!contactId) {
        console.warn('‚ö†Ô∏è startAutoRefresh: contactId is undefined');
        return;
      }
      
      stopAutoRefresh(); // Stop previous interval
      console.log('üîÑ Starting auto-refresh fallback for contact:', contactId);
      autoRefreshInterval = setInterval(() => {
        if (currentContactId === contactId) {
          console.log('‚è∞ Auto-refresh fallback triggered for:', contactId);
          refreshChatMessages(contactId);
        }
      }, 10000); // Refresh every 10 seconds as fallback
    }
    
    function stopAutoRefresh() {
      if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
        autoRefreshInterval = null;
      }
    }
    
    // Toggle auto-refresh on/off
    function toggleAutoRefresh() {
      const toggleBtn = document.getElementById('autoRefreshToggle');
      if (!toggleBtn) return;
      
      if (autoRefreshInterval) {
        stopAutoRefresh();
        toggleBtn.innerHTML = '<i class="bi bi-play-fill"></i>';
        toggleBtn.className = 'btn btn-sm btn-outline-secondary';
        toggleBtn.title = 'Enable auto-refresh';
        showToast('Auto-refresh disabled', 'info');
      } else {
        startAutoRefresh(currentContactId);
        toggleBtn.innerHTML = '<i class="bi bi-pause-fill"></i>';
        toggleBtn.className = 'btn btn-sm btn-outline-warning';
        toggleBtn.title = 'Disable auto-refresh';
        showToast('Auto-refresh enabled', 'success');
      }
    }
    
    // Fitur pencarian
    function setupSearch() {
      const searchInput = document.getElementById('search-chat');
      if (!searchInput) return;
      
      searchInput.addEventListener('input', function() {
        const query = this.value.toLowerCase();
        
        if (!allChats || allChats.length === 0) return;
        
        const filteredChats = allChats.filter(chat => {
          const name = (chat.name || '').toLowerCase();
          const id = chat.id.toLowerCase();
          return name.includes(query) || id.includes(query);
        });
        
        renderChatList(filteredChats);
      });
    }
  
    // Toast notification function
    function showToast(message, type = 'info') {
      // Create toast container if not exists
      let toastContainer = document.querySelector('.toast-container');
      if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
        toastContainer.style.zIndex = '9999';
        document.body.appendChild(toastContainer);
      }
      
      // Create toast element
      const toastEl = document.createElement('div');
      toastEl.className = `toast show bg-${type === 'error' ? 'danger' : type === 'success' ? 'success' : type === 'warning' ? 'warning' : 'info'} text-white`;
      toastEl.innerHTML = `
        <div class="toast-header">
          <strong class="me-auto">${type.charAt(0).toUpperCase() + type.slice(1)}</strong>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
        </div>
        <div class="toast-body">
          ${message}
        </div>
      `;
      
      toastContainer.appendChild(toastEl);
      
      // Auto remove after 3 seconds
      setTimeout(() => {
        toastEl.remove();
      }, 3000);
      
      // Manual close
      toastEl.querySelector('.btn-close').addEventListener('click', () => {
        toastEl.remove();
      });
    }
    
    // Debug: Log when script starts loading
    console.log('üöÄ chatsList.ejs script loading...');
    console.log('üîç Window object at script start:', Object.keys(window));
    console.log('üîç apiCall available at script start:', typeof window.apiCall);
  
    document.addEventListener('DOMContentLoaded', () => {
      console.log('üì± DOM Content Loaded event fired');
      console.log('üîç Window object at DOM ready:', Object.keys(window));
      console.log('üîç apiCall available at DOM ready:', typeof window.apiCall);
      
      try {
        // Check prerequisites
        if (!checkPrerequisites()) {
          console.error('‚ùå Prerequisites check failed');
          return;
        }
        
        console.log('‚úÖ All prerequisites met, initializing chat...');
        
      loadChatList();
      setupSearch();
        
        // Initialize WebSocket connection
        initWebSocket();
        
      } catch (error) {
        console.error('‚ùå Error during initialization:', error);
        showToast('Error initializing chat: ' + error.message, 'error');
      }
    });
    
    // Emoji picker functions
    function toggleEmojiPicker(contactId) {
      const picker = document.getElementById(`emojiPicker-${contactId}`);
      if (picker.style.display === 'none') {
        // Close all other emoji pickers first
        document.querySelectorAll('.emoji-picker').forEach(p => p.style.display = 'none');
        picker.style.display = 'block';
        
        // Add click outside to close
        setTimeout(() => {
          document.addEventListener('click', function closeEmojiPicker(e) {
            if (!picker.contains(e.target) && !e.target.closest('.btn-outline-secondary')) {
              picker.style.display = 'none';
              document.removeEventListener('click', closeEmojiPicker);
            }
          });
        }, 100);
      } else {
        picker.style.display = 'none';
      }
    }
    
    function insertEmoji(emoji, contactId) {
      const input = document.getElementById(`messageInput-${contactId}`);
      const start = input.selectionStart;
      const end = input.selectionEnd;
      const text = input.value;
      
      input.value = text.substring(0, start) + emoji + text.substring(end);
      input.selectionStart = input.selectionEnd = start + emoji.length;
      input.focus();
      
      // Close emoji picker
      document.getElementById(`emojiPicker-${contactId}`).style.display = 'none';
    }
    
    // File upload functions
    function openFileInput(contactId) {
      document.getElementById(`fileInput-${contactId}`).click();
    }
    
    async function handleFileSelect(event, contactId) {
      const file = event.target.files[0];
      if (!file) return;
      
      console.log('üìÅ File selected for contact:', contactId);
      console.log('üìÅ File details:', { name: file.name, type: file.type, size: file.size });
      
      // Check file size (max 10MB)
      const maxSize = 10 * 1024 * 1024; // 10MB in bytes
      if (file.size > maxSize) {
        showToast(`File terlalu besar! Maksimal ${(maxSize / 1024 / 1024).toFixed(1)}MB`, 'error');
        playErrorSound();
        return;
      }
      
      // Check file type
      const allowedTypes = [
        'image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp',
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/vnd.ms-excel',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'text/plain'
      ];
      
      if (!allowedTypes.includes(file.type)) {
        showToast('Tipe file tidak didukung!', 'error');
        playErrorSound();
        return;
      }
      
      // Escape contactId for valid CSS selector
      const escapedContactId = contactId.replace(/[^a-zA-Z0-9]/g, '_');
      console.log('üîß Escaped contact ID for file preview:', escapedContactId);
      
      // Show file preview
      const input = document.getElementById(`messageInput-${contactId}`);
      const preview = document.createElement('div');
      preview.className = 'file-preview';
      preview.innerHTML = `
        <div class="d-flex align-items-center">
          ${file.type.startsWith('image/') ? `<img src="${URL.createObjectURL(file)}" alt="Preview">` : ''}
          <div class="ms-2">
            <strong>${file.name}</strong>
            <div class="file-info">${(file.size / 1024).toFixed(1)} KB</div>
          </div>
          <button class="btn btn-sm btn-outline-danger ms-auto" onclick="removeFilePreview(this)">
            <i class="bi bi-x"></i>
          </div>
        </div>
        <textarea class="form-control mt-2" placeholder="Tambahkan caption (opsional)" id="caption-${escapedContactId}"></textarea>
        <button class="btn btn-primary btn-sm mt-2" onclick="sendFile('${contactId}')">
          <i class="bi bi-send-fill"></i> Kirim File
        </button>
      `;
      
      // Insert preview after input
      input.parentNode.insertBefore(preview, input.nextSibling);
      
      // Store file reference
      window.currentFile = file;
    }
    
    function removeFilePreview(button) {
      button.closest('.file-preview').remove();
      window.currentFile = null;
    }
    
    async function sendFile(contactId) {
      if (!window.currentFile) return;
      
      console.log('üöÄ Sending file for contact:', contactId);
      
      // Escape contactId for valid CSS selector
      const escapedContactId = contactId.replace(/[^a-zA-Z0-9]/g, '_');
      console.log('üîß Escaped contact ID:', escapedContactId);
      
      const captionElement = document.getElementById(`caption-${escapedContactId}`);
      console.log('üìù Caption element found:', !!captionElement);
      
      const caption = captionElement?.value || '';
      const file = window.currentFile;
      
      // Declare variables in proper scope
      let sendButton;
      let originalText;
      
      try {
        // Show sending indicator
        sendButton = captionElement?.nextElementSibling;
        if (!sendButton) {
          throw new Error('Send button not found');
        }
        originalText = sendButton.innerHTML;
        sendButton.innerHTML = '<i class="bi bi-hourglass-split"></i> Mengirim...';
        sendButton.disabled = true;
        
        // Show file size info
        const fileSizeMB = (file.size / 1024 / 1024).toFixed(2);
        console.log(`üì§ Uploading file: ${file.name} (${fileSizeMB}MB)`);
        
        // Convert file to base64
        const base64 = await fileToBase64(file);
        console.log(`‚úÖ File converted to base64, size: ${(base64.length / 1024 / 1024).toFixed(2)}MB`);
        
        // Send file via API
        const res = await apiCall(`/api/whatsapp/${sessionId}/chats/${contactId}/file`, {
          method: 'POST',
          body: JSON.stringify({
            message: caption,
            fileType: file.type,
            fileName: file.name,
            fileData: base64
          })
        });
        
        if (!res.ok) {
          let errorMessage = `HTTP ${res.status}: ${res.statusText}`;
          
          // Handle specific error cases
          if (res.status === 413) {
            errorMessage = 'File terlalu besar untuk dikirim';
          } else if (res.status === 500) {
            errorMessage = 'Server error saat memproses file';
          }
          
          throw new Error(errorMessage);
        }
        
        const data = await res.json();
        
        if (data.success) {
          // Remove file preview
          removeFilePreview(captionElement.nextElementSibling);
          
          // Clear file reference
          window.currentFile = null;
          
          // Show success message
          showToast('File berhasil dikirim!', 'success');
          playSuccessSound();
          
          // Refresh messages
          setTimeout(() => {
            refreshChatMessages(contactId);
          }, 1000);
        } else {
          throw new Error(data.message || 'Gagal mengirim file');
        }
        
      } catch (error) {
        console.error('Error sending file:', error);
        showToast('Gagal mengirim file: ' + error.message, 'error');
        playErrorSound();
      } finally {
        // Restore send button
        if (captionElement && sendButton) {
          sendButton.innerHTML = originalText;
          sendButton.disabled = false;
        }
      }
    }
    
    // Utility function to convert file to base64
    function fileToBase64(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => {
          const base64 = reader.result.split(',')[1]; // Remove data:image/...;base64, prefix
          resolve(base64);
        };
        reader.onerror = error => reject(error);
      });
    }
    
    // Media viewer functions
    function openMediaViewer(src, caption) {
      const modal = document.getElementById('mediaViewerModal');
      const content = document.getElementById('mediaViewerContent');
      
      if (content.tagName === 'IMG') {
        content.src = src;
        content.alt = caption;
      }
      
      modal.style.display = 'block';
    }
    
    function closeMediaViewer() {
      const modal = document.getElementById('mediaViewerModal');
      modal.style.display = 'none';
    }
    
    // Download functions
    function downloadDocument(base64Data, fileName) {
      if (!base64Data) {
        showToast('Data file tidak tersedia', 'error');
        return;
      }
      
      try {
        const byteCharacters = atob(base64Data);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
          byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray]);
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = fileName || 'document';
        link.click();
        
        showToast('Dokumen berhasil diunduh!', 'success');
      } catch (error) {
        console.error('Error downloading document:', error);
        showToast('Gagal mengunduh dokumen', 'error');
      }
    }
    
    function downloadMedia(base64Data, fileName) {
      if (!base64Data) {
        showToast('Data media tidak tersedia', 'error');
        return;
      }
      
      try {
        const byteCharacters = atob(base64Data);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
          byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray]);
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = fileName || 'media';
        link.click();
        
        showToast('Media berhasil diunduh!', 'success');
      } catch (error) {
        console.error('Error downloading media:', error);
        showToast('Gagal mengunduh media', 'error');
      }
    }
    
    // Close modal when clicking outside
    window.onclick = function(event) {
      const modal = document.getElementById('mediaViewerModal');
      if (event.target === modal) {
        closeMediaViewer();
      }
    }
  </script>
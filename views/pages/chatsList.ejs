<main class="nxl-container apps-container apps-chat">
    <div class="nxl-content without-header nxl-full-content">
      <div class="main-content d-flex">
        <!-- Sidebar Chat -->
        <div class="content-sidebar content-sidebar-xl border-end" id="chat-sidebar" style="width: 30%;">
          <div class="content-sidebar-header p-3 border-bottom d-flex justify-content-between align-items-center bg-light">
            <div class="d-flex align-items-center">
              <i class="bi bi-chat-dots-fill text-primary me-2"></i>
              <h5 class="m-0 fw-bold">Chat</h5>
            </div>
            <div class="position-relative">
              <input type="text" id="search-chat" class="form-control form-control-sm rounded-pill" placeholder="Cari chat...">
              <i class="bi bi-search position-absolute" style="right: 10px; top: 7px; font-size: 14px; color: #999;"></i>
            </div>
          </div>
          <div class="content-sidebar-body" id="chat-list" style="overflow-y: auto; max-height: 80vh;">
            <div class="d-flex justify-content-center align-items-center p-4">
              <div class="spinner-border text-primary" role="status" style="width: 1.5rem; height: 1.5rem;">
                <span class="visually-hidden">Memuat...</span>
              </div>
              <span class="ms-2 text-muted">Memuat daftar chat...</span>
            </div>
          </div>
        </div>
  
        <!-- Panel Obrolan -->
        <div class="content-area d-flex flex-column w-100 position-relative" id="chat-panel" style="background-color: #f5f6fa;">
          <div class="d-flex flex-column justify-content-center align-items-center h-100">
            <div class="text-center p-4">
              <div class="mb-4">
                <i class="bi bi-chat-square-text" style="font-size: 64px; color: #e2e8f0;"></i>
              </div>
              <h5 class="text-muted">Pilih percakapan di sebelah kiri</h5>
              <p class="text-muted small">Pesan-pesan akan ditampilkan di sini</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
  
  <style>
    /* General Styling */
    :root {
      --primary-color: #4361ee;
      --light-primary: rgba(67, 97, 238, 0.1);
      --bubble-me: #4361ee;
      --bubble-them: #f8f9fa;
      --chat-bg: #f5f6fa;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    /* Chat List Styling */
    .single-item {
      transition: all 0.2s ease;
      border-left: 3px solid transparent;
    }
    
    .single-item:hover {
      background-color: var(--light-primary);
      border-left: 3px solid var(--primary-color);
    }
    
    .single-item.active {
      background-color: var(--light-primary);
      border-left: 3px solid var(--primary-color);
    }
    
    .avatar-image {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      font-size: 18px;
      flex-shrink: 0;
      background-color: #e1e6f9 !important;
      color: var(--primary-color) !important;
    }
    
    .unread-badge {
      position: absolute;
      top: -5px;
      right: -5px;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background-color: #dc3545;
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 11px;
      font-weight: bold;
      border: 2px solid white;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.1); }
      100% { transform: scale(1); }
    }
    
    .avatar-container {
      position: relative;
      display: inline-block;
    }
    
    .message-status {
      font-size: 10px;
      color: #6c757d;
      margin-top: 2px;
    }
    
    .status-delivered {
      color: #28a745;
    }
    
    .status-read {
      color: #007bff;
    }
    
    .status-sent {
      color: #6c757d;
    }
    
    .time-badge {
      font-size: 12px;
      color: #8a96a3;
    }
    
    /* Chat Panel Styling */
    .chat-header {
      padding: 15px;
      background-color: white;
      border-bottom: 1px solid #e0e0e0;
      display: flex;
      align-items: center;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .chat-messages {
      padding: 20px;
      overflow-y: auto;
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    
    .message-bubble {
      max-width: 70%;
      padding: 10px 15px;
      border-radius: 18px;
      position: relative;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }
    
    .message-bubble.me {
      background-color: var(--bubble-me);
      color: white;
      border-bottom-right-radius: 4px;
      align-self: flex-end;
    }
    
    .message-bubble.them {
      background-color: var(--bubble-them);
      color: #333;
      border-bottom-left-radius: 4px;
      align-self: flex-start;
    }
    
    .message-time {
      font-size: 11px;
      margin-top: 5px;
      text-align: right;
    }
    
    .message-bubble.me .message-time {
      color: rgba(255, 255, 255, 0.8);
    }
    
    .message-bubble.them .message-time {
      color: #8a96a3;
    }
    
    .chat-input-container {
      padding: 15px;
      background-color: white;
      border-top: 1px solid #e0e0e0;
    }
    
    .chat-input {
      border-radius: 24px;
      resize: none;
      overflow: hidden;
      padding-right: 45px;
      height: 48px;
    }
    
    .send-button {
      position: absolute;
      right: 8px;
      bottom: 8px;
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    /* Responsive fixes */
    @media (max-width: 768px) {
      .content-sidebar {
        width: 100% !important;
        display: none;
      }
      
      .show-sidebar .content-sidebar {
        display: block;
      }
      
      .show-sidebar .content-area {
        display: none !important;
      }
    }
  </style>
  
  <script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>
  <script>
    const token = localStorage.getItem('token');
    const urlParams = new URLSearchParams(window.location.search);
    const sessionId = urlParams.get('id');
    
    // Debug: Log session ID
    console.log('üîç Session ID from URL:', sessionId);
    console.log('üîç Current URL:', window.location.href);
  
    // Initialize WebSocket connection
    let socket;
    
    function initWebSocket() {
      // Get socket.io from CDN or local
      if (typeof io !== 'undefined') {
        socket = io();
        
        socket.on('connect', () => {
          console.log('üîå WebSocket connected:', socket.id);
          // Join session room
          socket.emit('join-session', sessionId);
          showToast('Real-time connection established!', 'success');
        });
        
        socket.on('disconnect', () => {
          console.log('üîå WebSocket disconnected');
          showToast('Real-time connection lost. Reconnecting...', 'warning');
        });
        
        socket.on('new-message', (messageData) => {
          console.log('üì® Real-time message received:', messageData);
          handleRealTimeMessage(messageData);
        });
        
        socket.on('message-status', (statusData) => {
          console.log('üìä Message status update:', statusData);
          updateMessageStatus(statusData);
        });
        
      } else {
        console.warn('‚ö†Ô∏è Socket.io not available, falling back to auto-refresh');
        // Fallback to auto-refresh if WebSocket not available
        if (currentContactId) {
          startAutoRefresh(currentContactId);
        } else {
          console.log('üì± No contact selected yet, auto-refresh will start when chat is opened');
        }
      }
    }
    
    function playNotificationSound() {
      const audio = new Audio('/assets/sounds/message.mp3');
      audio.play();
    }
  
    let currentContactId = null;
    let currentContactName = null;
    let currentSessionId = sessionId; // Add this line
    let allChats = [];
  
    async function loadChatList() {
      const container = document.getElementById('chat-list');
      container.innerHTML = `
        <div class="d-flex justify-content-center align-items-center p-4">
          <div class="spinner-border text-primary" role="status" style="width: 1.5rem; height: 1.5rem;">
            <span class="visually-hidden">Memuat...</span>
          </div>
          <span class="ms-2 text-muted">Memuat daftar chat...</span>
        </div>
      `;
  
      try {
        const res = await fetch(`/api/whatsapp/${sessionId}/chats`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
  
        const data = await res.json();
        allChats = data.chats || [];
        
        if (!data.success || data.chats.length === 0) {
          container.innerHTML = `
            <div class="text-center p-5">
              <i class="bi bi-chat-left-text" style="font-size: 48px; color: #e2e8f0;"></i>
              <p class="mt-3 text-muted">Tidak ada chat ditemukan</p>
            </div>
          `;
          return;
        }
  
        renderChatList(data.chats);
  
      } catch (error) {
        console.error(error);
        container.innerHTML = `
          <div class="alert alert-danger mx-3 my-4">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            Gagal memuat chat
          </div>
        `;
      }
    }
    
    function renderChatList(chats) {
      const container = document.getElementById('chat-list');
      container.innerHTML = '';
      
      chats.forEach(chat => {
        const item = document.createElement('div');
        item.className = `p-3 d-flex position-relative border-bottom c-pointer single-item ${currentContactId === chat.id ? 'active' : ''}`;
        item.style.cursor = 'pointer';
        
        const initial = (chat.name || '?')[0].toUpperCase();
        
        item.innerHTML = `
          <div class="avatar-container position-relative">
            <div class="avatar-image">
              ${initial}
            </div>
            <!-- Unread badge will be added here dynamically -->
          </div>
          <div class="ms-3 item-desc flex-grow-1">
            <div class="w-100 d-flex align-items-center justify-content-between">
              <div class="fw-medium text-truncate" style="max-width: 70%;">
                ${chat.name || '(Tanpa Nama)'}
              </div>
              <div class="time-badge">
                ${getCurrentTime()}
              </div>
            </div>
            <div class="d-flex justify-content-between align-items-center mt-1">
              <p class="small text-muted mb-0 text-truncate last-message" style="max-width: 85%;">
                ${chat.id}
              </p>
            </div>
          </div>
        `;
        
        // Add data attribute for easy selection
        item.setAttribute('data-contact-id', chat.id);
        
        item.onclick = () => {
          document.querySelectorAll('.single-item').forEach(el => el.classList.remove('active'));
          item.classList.add('active');
          loadChatMessages(chat.id, chat.name);
        };
        
        container.appendChild(item);
      });
    }
    
    function getCurrentTime() {
      const now = new Date();
      return now.getHours().toString().padStart(2, '0') + ':' + 
             now.getMinutes().toString().padStart(2, '0');
    }
  
    async function loadChatMessages(contactId, contactName) {
      // Stop auto-refresh for previous chat
      stopAutoRefresh();
      
      // Clear unread indicator for this contact
      clearUnreadIndicator(contactId);
      
      currentContactId = contactId;
      currentContactName = contactName;
      currentSessionId = sessionId; // Ensure currentSessionId is set
      
      console.log('üì± Chat loaded:', {
        contactId,
        contactName,
        currentSessionId,
        sessionId
      });
      
      const panel = document.getElementById('chat-panel');
      panel.innerHTML = `
        <div class="d-flex justify-content-center align-items-center h-100">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Memuat pesan...</span>
          </div>
          <span class="ms-2 text-muted">Memuat pesan...</span>
        </div>
      `;
  
      try {
        const res = await fetch(`/api/whatsapp/${sessionId}/chats/${contactId}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        const data = await res.json();
  
        if (!data.success) {
          panel.innerHTML = `
            <div class="d-flex flex-column justify-content-center align-items-center h-100">
              <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                Gagal memuat obrolan
              </div>
            </div>
          `;
          return;
        }
  
        let messagesHTML = '';
        
        if (data.messages.length === 0) {
          messagesHTML = `
            <div class="text-center my-5 py-5">
              <i class="bi bi-chat" style="font-size: 48px; color: #e2e8f0;"></i>
              <p class="mt-3 text-muted">Belum ada pesan</p>
            </div>
          `;
        } else {
          messagesHTML = data.messages.map(msg => {
            const time = new Date(msg.timestamp * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
            return `
              <div class="message-bubble ${msg.fromMe ? 'me' : 'them'}">
                <div class="message-content">${msg.body}</div>
                <div class="message-time">${time}</div>
              </div>
            `;
          }).join('');
        }
  
        panel.innerHTML = `
          <div class="chat-header d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
              <div class="avatar-image me-3">
                ${(contactName || '?')[0].toUpperCase()}
              </div>
              <div>
                <h6 class="mb-0 fw-bold">${contactName || 'Tanpa Nama'}</h6>
                <div class="small text-muted">${contactId}</div>
              </div>
            </div>
            <div class="d-flex gap-2">
              <button class="btn btn-sm btn-outline-primary" onclick="refreshChatMessages('${contactId}')" title="Refresh messages">
                <i class="bi bi-arrow-clockwise"></i>
              </button>
              <button class="btn btn-sm btn-outline-secondary" onclick="toggleAutoRefresh()" id="autoRefreshToggle" title="Toggle auto-refresh">
                <i class="bi bi-play-fill"></i>
              </button>
              <button class="btn btn-sm btn-outline-info" onclick="testUnreadIndicator('${contactId}')" title="Test unread indicator">
                <i class="bi bi-bell"></i>
              </button>
            </div>
          </div>
          
          <div class="chat-messages" id="messages-container">
            ${messagesHTML}
          </div>
          
          <div class="chat-input-container">
            <div class="position-relative">
              <textarea id="messageInput-${contactId}" class="form-control chat-input" rows="1" placeholder="Ketik pesan..."></textarea>
              <button class="btn btn-primary send-button" onclick="sendMessage('${contactId}')">
                <i class="bi bi-send-fill"></i>
              </button>
            </div>
          </div>
        `;
  
        // Auto resize textarea
        const textarea = document.getElementById(`messageInput-${contactId}`);
        if (textarea) {
          textarea.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight < 120 ? this.scrollHeight : 120) + 'px';
          });
          
          // Enter to send, Shift+Enter for newline
          textarea.addEventListener('keydown', function(e) {
            if (e.keyCode === 13 && !e.shiftKey) {
              e.preventDefault();
              sendMessage(contactId);
            }
          });
        }
  
        // Scroll to bottom
        setTimeout(() => {
          const messagesContainer = document.getElementById('messages-container');
          if (messagesContainer) messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }, 100);
        
        // Start auto-refresh for this chat (fallback)
        startAutoRefresh(contactId);
        
        // Join session room for real-time updates
        if (socket && socket.connected) {
          socket.emit('join-session', sessionId);
          console.log('üì± Joined session room:', sessionId);
        }
        
        // Debug: Log current state
        console.log('‚úÖ Chat loaded for:', contactId);
        console.log('üîÑ Auto-refresh started for:', contactId);
  
      } catch (err) {
        console.error(err);
        panel.innerHTML = `
          <div class="d-flex flex-column justify-content-center align-items-center h-100">
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle-fill me-2"></i>
              Terjadi kesalahan saat memuat pesan
            </div>
          </div>
        `;
      }
    }
  
    async function sendMessage(contactId) {
      const input = document.getElementById(`messageInput-${contactId}`);
      const message = input.value;
      if (!message.trim()) return;
  
      try {
        // Show sending indicator
        const sendButton = input.nextElementSibling;
        const originalIcon = sendButton.innerHTML;
        sendButton.innerHTML = '<i class="bi bi-hourglass-split"></i>';
        sendButton.disabled = true;
  
        const res = await fetch(`/api/whatsapp/${sessionId}/chats/${contactId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ message })
        });
  
        const data = await res.json();
        if (data.success) {
          // Clear input
          input.value = '';
          input.style.height = 'auto';
          
          // Add sent message to UI immediately (optimistic update)
          addMessageToUI(contactId, message, true, Date.now());
          
          // Refresh messages to get any replies
          setTimeout(() => {
            refreshChatMessages(contactId);
          }, 1000);
          
          // Update chat list to show latest message
          updateChatListWithLatestMessage(contactId, message);
        } else {
          showToast(data.message || 'Gagal mengirim pesan', 'error');
        }
      } catch (err) {
        console.error(err);
        showToast('Terjadi kesalahan saat mengirim pesan', 'error');
      } finally {
        // Restore send button
        const sendButton = input.nextElementSibling;
        sendButton.innerHTML = '<i class="bi bi-send-fill"></i>';
        sendButton.disabled = false;
      }
    }
    
    // Add message to UI immediately (optimistic update)
    function addMessageToUI(contactId, message, isFromMe, timestamp) {
      const messagesContainer = document.getElementById('messages-container');
      if (!messagesContainer) return;
      
      const time = new Date(timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
      const messageHTML = `
        <div class="message-bubble ${isFromMe ? 'me' : 'them'}">
          <div class="message-content">${message}</div>
          <div class="message-time">${time}</div>
        </div>
      `;
      
      messagesContainer.insertAdjacentHTML('beforeend', messageHTML);
      
      // Scroll to bottom
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    // Refresh chat messages without full reload
    async function refreshChatMessages(contactId) {
      try {
        console.log('üîÑ Refreshing messages for contact:', contactId);
        
        const res = await fetch(`/api/whatsapp/${sessionId}/chats/${contactId}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        const data = await res.json();
  
        if (data.success && data.messages.length > 0) {
          // Get current messages count
          const currentMessages = document.querySelectorAll('#messages-container .message-bubble');
          const newMessagesCount = data.messages.length - currentMessages.length;
          
          console.log(`üìä Current messages: ${currentMessages.length}, Total from API: ${data.messages.length}, New: ${newMessagesCount}`);
          
          if (newMessagesCount > 0) {
            // Add only new messages
            const messagesContainer = document.getElementById('messages-container');
            const newMessages = data.messages.slice(-newMessagesCount);
            
            console.log('üì® Adding new messages:', newMessages);
            
            newMessages.forEach(msg => {
              const time = new Date(msg.timestamp * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
              const messageHTML = `
                <div class="message-bubble ${msg.fromMe ? 'me' : 'them'}">
                  <div class="message-content">${msg.body}</div>
                  <div class="message-time">${time}</div>
                </div>
              `;
              messagesContainer.insertAdjacentHTML('beforeend', messageHTML);
            });
            
            // Scroll to bottom for new messages
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            
            // Show notification for new messages
            if (newMessages.some(msg => !msg.fromMe)) {
              showToast('Pesan baru diterima!', 'info');
              // Update chat list to show unread indicator
              updateChatListUnreadIndicator(contactId, true);
            }
          }
        }
      } catch (err) {
        console.error('Error refreshing messages:', err);
      }
    }
    
    // Update chat list with latest message
    function updateChatListWithLatestMessage(contactId, message) {
      const chatItem = document.querySelector(`[data-contact-id="${contactId}"]`);
      if (chatItem) {
        const lastMessageElement = chatItem.querySelector('.last-message');
        if (lastMessageElement) {
          lastMessageElement.textContent = message.length > 30 ? message.substring(0, 30) + '...' : message;
        }
        
        const timeElement = chatItem.querySelector('.time-badge');
        if (timeElement) {
          timeElement.textContent = 'now';
        }
        
        // Update last message time
        const lastMessageTime = chatItem.querySelector('.last-message-time');
        if (lastMessageTime) {
          lastMessageTime.textContent = 'now';
        }
      }
    }
    
    // Update unread indicator in chat list
    function updateChatListUnreadIndicator(contactId, hasUnread) {
      const chatItem = document.querySelector(`[data-contact-id="${contactId}"]`);
      if (chatItem) {
        let unreadBadge = chatItem.querySelector('.unread-badge');
        
        if (hasUnread && !unreadBadge) {
          // Create unread badge if it doesn't exist
          unreadBadge = document.createElement('div');
          unreadBadge.className = 'unread-badge';
          unreadBadge.textContent = '1';
          
          // Add to chat item
          const avatarContainer = chatItem.querySelector('.avatar-container');
          if (avatarContainer) {
            avatarContainer.appendChild(unreadBadge);
          }
        } else if (unreadBadge && !hasUnread) {
          // Remove unread badge if no unread messages
          unreadBadge.remove();
        } else if (unreadBadge && hasUnread) {
          // Update unread count
          const currentCount = parseInt(unreadBadge.textContent) || 0;
          unreadBadge.textContent = currentCount + 1;
        }
      }
    }
    
    // Clear unread indicator when chat is opened
    function clearUnreadIndicator(contactId) {
      updateChatListUnreadIndicator(contactId, false);
    }
    
    // Test function for unread indicator
    function testUnreadIndicator(contactId) {
      console.log('üß™ Testing unread indicator for:', contactId);
      updateChatListUnreadIndicator(contactId, true);
      showToast('Test: Unread indicator added!', 'info');
    }
    

    
    // Handle real-time incoming messages
    function handleRealTimeMessage(messageData) {
      const { contactId, message, fromMe, timestamp, sessionId } = messageData;
      
      console.log('üì® handleRealTimeMessage called with:', {
        contactId,
        message: message.substring(0, 50) + '...',
        fromMe,
        timestamp,
        sessionId,
        currentSessionId,
        currentContactId
      });
      
      // Check if this message is for current session
      if (sessionId !== currentSessionId) {
        console.log('üì± Message for different session, ignoring');
        return;
      }
      
      // Check if this message is for current contact
      if (contactId === currentContactId) {
        // Add message to current chat
        addMessageToUI(contactId, message, fromMe, timestamp * 1000);
        showToast('Pesan baru diterima!', 'info');
      } else {
        // Update unread indicator for other contacts
        updateChatListUnreadIndicator(contactId, true);
        showToast(`Pesan baru dari ${contactId}`, 'info');
      }
      
      // Update chat list with latest message
      updateChatListWithLatestMessage(contactId, message);
    }
    
    // Update message status (delivered, read, etc.)
    function updateMessageStatus(statusData) {
      const { messageId, status } = statusData;
      const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
      
      if (messageElement) {
        const statusElement = messageElement.querySelector('.message-status');
        if (statusElement) {
          statusElement.textContent = status;
          statusElement.className = `message-status status-${status}`;
        }
      }
    }
    
    // Auto-refresh messages every 10 seconds (fallback)
    let autoRefreshInterval;
    function startAutoRefresh(contactId) {
      if (!contactId) {
        console.warn('‚ö†Ô∏è startAutoRefresh: contactId is undefined');
        return;
      }
      
      stopAutoRefresh(); // Stop previous interval
      console.log('üîÑ Starting auto-refresh fallback for contact:', contactId);
      autoRefreshInterval = setInterval(() => {
        if (currentContactId === contactId) {
          console.log('‚è∞ Auto-refresh fallback triggered for:', contactId);
          refreshChatMessages(contactId);
        }
      }, 10000); // Refresh every 10 seconds as fallback
    }
    
    function stopAutoRefresh() {
      if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
        autoRefreshInterval = null;
      }
    }
    
    // Toggle auto-refresh on/off
    function toggleAutoRefresh() {
      const toggleBtn = document.getElementById('autoRefreshToggle');
      if (!toggleBtn) return;
      
      if (autoRefreshInterval) {
        stopAutoRefresh();
        toggleBtn.innerHTML = '<i class="bi bi-play-fill"></i>';
        toggleBtn.className = 'btn btn-sm btn-outline-secondary';
        toggleBtn.title = 'Enable auto-refresh';
        showToast('Auto-refresh disabled', 'info');
      } else {
        startAutoRefresh(currentContactId);
        toggleBtn.innerHTML = '<i class="bi bi-pause-fill"></i>';
        toggleBtn.className = 'btn btn-sm btn-outline-warning';
        toggleBtn.title = 'Disable auto-refresh';
        showToast('Auto-refresh enabled', 'success');
      }
    }
    
    // Fitur pencarian
    function setupSearch() {
      const searchInput = document.getElementById('search-chat');
      if (!searchInput) return;
      
      searchInput.addEventListener('input', function() {
        const query = this.value.toLowerCase();
        
        if (!allChats || allChats.length === 0) return;
        
        const filteredChats = allChats.filter(chat => {
          const name = (chat.name || '').toLowerCase();
          const id = chat.id.toLowerCase();
          return name.includes(query) || id.includes(query);
        });
        
        renderChatList(filteredChats);
      });
    }
  
    // Toast notification function
    function showToast(message, type = 'info') {
      // Create toast container if not exists
      let toastContainer = document.querySelector('.toast-container');
      if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
        toastContainer.style.zIndex = '9999';
        document.body.appendChild(toastContainer);
      }
      
      // Create toast element
      const toastEl = document.createElement('div');
      toastEl.className = `toast show bg-${type === 'error' ? 'danger' : type === 'success' ? 'success' : type === 'warning' ? 'warning' : 'info'} text-white`;
      toastEl.innerHTML = `
        <div class="toast-header">
          <strong class="me-auto">${type.charAt(0).toUpperCase() + type.slice(1)}</strong>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
        </div>
        <div class="toast-body">
          ${message}
        </div>
      `;
      
      toastContainer.appendChild(toastEl);
      
      // Auto remove after 3 seconds
      setTimeout(() => {
        toastEl.remove();
      }, 3000);
      
      // Manual close
      toastEl.querySelector('.btn-close').addEventListener('click', () => {
        toastEl.remove();
      });
    }
    
    document.addEventListener('DOMContentLoaded', () => {
      loadChatList();
      setupSearch();
      
      // Initialize WebSocket connection
      initWebSocket();
    });
  </script>
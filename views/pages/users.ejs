<main class="nxl-container">
    <div class="nxl-content">
        <!-- [ page-header ] start -->
        <div class="page-header mb-4">
            <div class="page-header-left d-flex align-items-center">
                <div class="page-header-title">
                    <h4 class="fw-bold text-primary mb-1">Users Management</h4>
                </div>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb ms-3 mb-0">
                        <li class="breadcrumb-item"><a href="/" class="text-decoration-none">Home</a></li>
                        <li class="breadcrumb-item active">Users</li>
                    </ol>
                </nav>
            </div>
            <div class="page-header-right ms-auto">
                <div class="page-header-right-items">
                    <button type="button" class="btn btn-primary px-4 rounded-pill" data-bs-toggle="modal" data-bs-target="#addUserModal">
                        <i class="bi bi-plus-circle me-2"></i>Add User
                    </button>
                </div>
                <div class="d-md-none d-flex align-items-center ms-3">
                    <a href="javascript:void(0)" class="page-header-right-open-toggle">
                        <i class="bi bi-list fs-4"></i>
                    </a>
                </div>
            </div>
        </div>
        <!-- [ page-header ] end -->

        <!-- [ Main Content ] start -->
        <div class="main-content">
            <div class="row g-4">
                <!-- Search and Filter Card -->
                <div class="col-12">
                    <div class="card border-0 shadow-sm">
                        <div class="card-header bg-white pt-4 pb-3 border-0">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-search text-primary fs-4 me-2"></i>
                                <h5 class="card-title fw-bold mb-0">Search & Filter</h5>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-lg-6 mb-3">
                                    <label class="form-label fw-medium">Search Users</label>
                                    <div class="input-group">
                                        <span class="input-group-text bg-white border-end-0">
                                            <i class="bi bi-search text-primary"></i>
                                        </span>
                                        <input type="text" id="searchInput" class="form-control border-start-0" placeholder="Search by username or email...">
                                        <button class="btn btn-outline-primary" type="button" id="searchBtn">
                                            <i class="bi bi-search"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="col-lg-3 mb-3">
                                    <label class="form-label fw-medium">Items per page</label>
                                    <select id="limitSelect" class="form-select">
                                        <option value="10">10 per page</option>
                                        <option value="25">25 per page</option>
                                        <option value="50">50 per page</option>
                                    </select>
                                </div>
                                <div class="col-lg-3 mb-3">
                                    <label class="form-label fw-medium">&nbsp;</label>
                                    <div class="d-grid">
                                        <button class="btn btn-outline-secondary" onclick="resetFilter()">
                                            <i class="bi bi-arrow-clockwise me-2"></i>Reset
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Users Table Card -->
                <div class="col-12">
                    <div class="card border-0 shadow-sm">
                        <div class="card-header bg-white pt-4 pb-3 border-0">
                            <div class="d-flex align-items-center justify-content-between">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-people-fill text-primary fs-4 me-2"></i>
                                    <h5 class="card-title fw-bold mb-0">Users List</h5>
                                </div>
                                <div class="badge bg-primary rounded-pill" id="totalUsersText">0 users</div>
                            </div>
                        </div>
                        <div class="card-body">
                            <!-- Loading State -->
                            <div id="loadingState" class="text-center py-5">
                                <div class="spinner-border text-primary" role="status"></div>
                                <p class="mt-3 text-muted">Loading users...</p>
                            </div>

                            <!-- Empty State -->
                            <div id="emptyState" class="text-center py-5" style="display: none;">
                                <i class="bi bi-people text-muted" style="font-size: 4rem;"></i>
                                <h5 class="mt-3 text-muted">No users found</h5>
                                <p class="text-muted mb-4">There are no users matching your search criteria.</p>
                                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUserModal">
                                    <i class="bi bi-plus-circle me-2"></i>Add First User
                                </button>
                            </div>

                            <!-- Users Table -->
                            <div id="usersTable" class="table-responsive" style="display: none;">
                                <table class="table table-hover align-middle">
                                    <thead class="table-light">
                                        <tr>
                                            <th class="fw-bold">
                                                <i class="bi bi-hash text-primary me-1"></i>ID
                                            </th>
                                            <th class="fw-bold">
                                                <i class="bi bi-person text-primary me-1"></i>Username
                                            </th>
                                            <th class="fw-bold">
                                                <i class="bi bi-envelope text-primary me-1"></i>Email
                                            </th>
                                            <th class="fw-bold">
                                                <i class="bi bi-calendar text-primary me-1"></i>Created At
                                            </th>
                                            <th class="fw-bold text-center">
                                                <i class="bi bi-gear text-primary me-1"></i>Actions
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody id="usersTableBody">
                                        <!-- Data akan diisi oleh JavaScript -->
                                    </tbody>
                                </table>
                            </div>

                            <!-- Pagination -->
                            <nav aria-label="Users pagination" id="paginationContainer" style="display: none;">
                                <ul class="pagination justify-content-center mb-0" id="pagination">
                                    <!-- Pagination akan diisi oleh JavaScript -->
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- [ Main Content ] end -->
    </div>
</main>

<!-- Add User Modal -->
<div class="modal fade" id="addUserModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">
                    <i class="bi bi-person-plus-fill me-2"></i>Add New User
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="addUserForm">
                <div class="modal-body p-4">
                    <div class="mb-4">
                        <label for="addUsername" class="form-label fw-medium">Username *</label>
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="bi bi-person-fill text-primary"></i>
                            </span>
                            <input type="text" class="form-control border-start-0" id="addUsername" required placeholder="Enter username">
                        </div>
                    </div>
                    <div class="mb-4">
                        <label for="addEmail" class="form-label fw-medium">Email</label>
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="bi bi-envelope-fill text-primary"></i>
                            </span>
                            <input type="email" class="form-control border-start-0" id="addEmail" placeholder="Enter email (optional)">
                        </div>
                    </div>
                    <div class="mb-4">
                        <label for="addPassword" class="form-label fw-medium">Password *</label>
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="bi bi-lock-fill text-primary"></i>
                            </span>
                            <input type="password" class="form-control border-start-0" id="addPassword" required placeholder="Enter password">
                            <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('addPassword', this)">
                                <i class="bi bi-eye"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer border-0 px-4 pb-4">
                    <button type="button" class="btn btn-light px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary px-4">
                        <i class="bi bi-check2 me-2"></i>Add User
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">
                    <i class="bi bi-pencil-fill me-2"></i>Edit User
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editUserForm">
                <div class="modal-body p-4">
                    <input type="hidden" id="editUserId">
                    <div class="mb-4">
                        <label for="editUsername" class="form-label fw-medium">Username *</label>
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="bi bi-person-fill text-primary"></i>
                            </span>
                            <input type="text" class="form-control border-start-0" id="editUsername" required>
                        </div>
                    </div>
                    <div class="mb-4">
                        <label for="editEmail" class="form-label fw-medium">Email</label>
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="bi bi-envelope-fill text-primary"></i>
                            </span>
                            <input type="email" class="form-control border-start-0" id="editEmail">
                        </div>
                    </div>
                    <div class="mb-4">
                        <label for="editPassword" class="form-label fw-medium">New Password</label>
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="bi bi-lock-fill text-primary"></i>
                            </span>
                            <input type="password" class="form-control border-start-0" id="editPassword" placeholder="Leave blank to keep current password">
                            <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('editPassword', this)">
                                <i class="bi bi-eye"></i>
                            </button>
                        </div>
                        <div class="form-text">Leave blank to keep current password</div>
                    </div>
                </div>
                <div class="modal-footer border-0 px-4 pb-4">
                    <button type="button" class="btn btn-light px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning px-4">
                        <i class="bi bi-check2 me-2"></i>Update User
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>Confirm Delete
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <p class="mb-3">Are you sure you want to delete this user?</p>
                <div class="alert alert-warning d-flex align-items-center" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    <small>This action cannot be undone.</small>
                </div>
            </div>
            <div class="modal-footer border-0 px-4 pb-4">
                <button type="button" class="btn btn-light px-4" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger px-4" id="confirmDeleteBtn">
                    <i class="bi bi-trash-fill me-2"></i>Delete User
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border-radius: 12px;
        transition: all 0.3s ease;
    }
    
    .btn {
        border-radius: 6px;
        padding: 0.5rem 1.25rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .btn-primary {
        background: linear-gradient(45deg, #4a6bff, #657eff);
        border: none;
        box-shadow: 0 4px 12px rgba(74, 107, 255, 0.2);
    }
    
    .btn-primary:hover {
        background: linear-gradient(45deg, #3955d8, #4a6bff);
        box-shadow: 0 6px 16px rgba(74, 107, 255, 0.3);
        transform: translateY(-2px);
    }
    
    .btn-success {
        background: linear-gradient(45deg, #28a745, #5cb85c);
        border: none;
        box-shadow: 0 4px 12px rgba(40, 167, 69, 0.2);
    }
    
    .btn-success:hover {
        background: linear-gradient(45deg, #218838, #28a745);
        box-shadow: 0 6px 16px rgba(40, 167, 69, 0.3);
        transform: translateY(-2px);
    }
    
    .btn-warning {
        background: linear-gradient(45deg, #ffc107, #ffca28);
        border: none;
        color: #212529;
        box-shadow: 0 4px 12px rgba(255, 193, 7, 0.2);
    }
    
    .btn-warning:hover {
        background: linear-gradient(45deg, #e0a800, #ffc107);
        box-shadow: 0 6px 16px rgba(255, 193, 7, 0.3);
        transform: translateY(-2px);
        color: #212529;
    }
    
    .btn-danger {
        background: linear-gradient(45deg, #dc3545, #ef5350);
        border: none;
        box-shadow: 0 4px 12px rgba(220, 53, 69, 0.2);
    }
    
    .btn-danger:hover {
        background: linear-gradient(45deg, #c82333, #dc3545);
        box-shadow: 0 6px 16px rgba(220, 53, 69, 0.3);
        transform: translateY(-2px);
    }
    
    .text-primary {
        color: #4a6bff !important;
    }
    
    .table th {
        border-top: none;
        font-size: 0.9rem;
    }
    
    .table td {
        vertical-align: middle;
    }
    
    .badge {
        font-size: 0.75rem;
        padding: 0.5rem 0.75rem;
    }
    
    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
    }
    
    .input-group-text {
        border-right: none;
    }
    
    .form-control:focus {
        border-color: #4a6bff;
        box-shadow: 0 0 0 0.2rem rgba(74, 107, 255, 0.25);
    }
    
    .toast-container {
        z-index: 1055;
    }
    
    .modal-content {
        border-radius: 12px;
    }
    
    .modal-header {
        border-radius: 12px 12px 0 0;
    }
    
    .pagination .page-link {
        border-radius: 6px;
        margin: 0 2px;
        border: 1px solid #dee2e6;
    }
    
    .pagination .page-item.active .page-link {
        background: linear-gradient(45deg, #4a6bff, #657eff);
        border-color: #4a6bff;
    }
    
    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(45deg, #4a6bff, #657eff);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 0.9rem;
    }
</style>

<script>
    // State management
    let currentPage = 1;
    let currentLimit = 10;
    let currentSearch = '';
    let deleteUserId = null;

    // Get token from localStorage
    const getToken = () => localStorage.getItem('token');

    // Check authentication
    const checkAuth = () => {
        if (!getToken()) {
            window.location.href = '/auth/login';
            return false;
        }
        return true;
    };

    // Toast function for notifications
    function showToast(message, type = 'info') {
        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }
        
        let bgColor = 'bg-primary';
        let icon = 'bi-info-circle-fill';
        
        if (type === 'success') {
            bgColor = 'bg-success';
            icon = 'bi-check-circle-fill';
        } else if (type === 'warning') {
            bgColor = 'bg-warning text-dark';
            icon = 'bi-exclamation-triangle-fill';
        } else if (type === 'error') {
            bgColor = 'bg-danger';
            icon = 'bi-x-circle-fill';
        }
        
        const toastEl = document.createElement('div');
        toastEl.className = `toast ${bgColor} text-white border-0 shadow`;
        toastEl.setAttribute('role', 'alert');
        toastEl.setAttribute('aria-live', 'assertive');
        toastEl.setAttribute('aria-atomic', 'true');
        
        toastEl.innerHTML = `
            <div class="toast-body d-flex align-items-center">
                <i class="bi ${icon} me-2 fs-5"></i>
                <span>${message}</span>
                <button type="button" class="btn-close btn-close-white ms-auto" data-bs-dismiss="toast"></button>
            </div>
        `;
        
        toastContainer.appendChild(toastEl);
        
        const toast = new bootstrap.Toast(toastEl);
        toast.show();
        
        toastEl.addEventListener('hidden.bs.toast', function() {
            toastEl.remove();
        });
    }

    // API calls with authentication
    const apiCall = async (url, options = {}) => {
        const token = getToken();
        const headers = {
            'Content-Type': 'application/json',
            ...options.headers
        };
        
        if (token) {
            headers['Authorization'] = `Bearer ${token}`;
        }

        const response = await fetch(url, {
            ...options,
            headers
        });

        if (response.status === 401) {
            localStorage.removeItem('token');
            window.location.href = '/auth/login';
            return;
        }

        return response;
    };

    // Show/hide UI states
    const showLoading = () => {
        document.getElementById('loadingState').style.display = 'block';
        document.getElementById('usersTable').style.display = 'none';
        document.getElementById('emptyState').style.display = 'none';
        document.getElementById('paginationContainer').style.display = 'none';
    };

    const showEmpty = () => {
        document.getElementById('loadingState').style.display = 'none';
        document.getElementById('usersTable').style.display = 'none';
        document.getElementById('emptyState').style.display = 'block';
        document.getElementById('paginationContainer').style.display = 'none';
    };

    const showTable = () => {
        document.getElementById('loadingState').style.display = 'none';
        document.getElementById('usersTable').style.display = 'block';
        document.getElementById('emptyState').style.display = 'none';
        document.getElementById('paginationContainer').style.display = 'block';
    };

    // Load users
    const loadUsers = async () => {
        if (!checkAuth()) return;
        
        showLoading();
        
        try {
            const params = new URLSearchParams({
                page: currentPage,
                limit: currentLimit,
                search: currentSearch
            });

            const response = await apiCall(`/api/users?${params}`);
            const data = await response.json();

            if (data.success) {
                if (data.data.users.length === 0) {
                    showEmpty();
                    document.getElementById('totalUsersText').textContent = '0 users';
                } else {
                    showTable();
                    renderUsersTable(data.data.users);
                    renderPagination(data.data.pagination);
                    document.getElementById('totalUsersText').textContent = `${data.data.pagination.totalUsers} users`;
                }
            } else {
                showEmpty();
                showToast('Error loading users: ' + data.message, 'error');
            }
        } catch (error) {
            console.error('Error loading users:', error);
            showEmpty();
            showToast('Failed to load users', 'error');
        }
    };

    // Generate user avatar
    const generateAvatar = (username) => {
        const initial = username.charAt(0).toUpperCase();
        return `<div class="user-avatar">${initial}</div>`;
    };

    // Render users table
    const renderUsersTable = (users) => {
        const tbody = document.getElementById('usersTableBody');
        tbody.innerHTML = '';

        users.forEach(user => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>
                    <span class="badge bg-light text-dark">#${user.id}</span>
                </td>
                <td>
                    <div class="d-flex align-items-center">
                        ${generateAvatar(user.username)}
                        <span class="ms-3 fw-medium">${user.username}</span>
                    </div>
                </td>
                <td>
                    ${user.email ? `<i class="bi bi-envelope me-2 text-muted"></i>${user.email}` : '<span class="text-muted">-</span>'}
                </td>
                <td>
                    <div class="d-flex align-items-center">
                        <i class="bi bi-calendar3 me-2 text-muted"></i>
                        <span>${new Date(user.created_at).toLocaleString()}</span>
                    </div>
                </td>
                <td class="text-center">
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-warning rounded-start" onclick="editUser(${user.id})" title="Edit User">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger rounded-end" onclick="confirmDeleteUser(${user.id})" title="Delete User">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </td>
            `;
            tbody.appendChild(row);
        });
    };

    // Render pagination
    const renderPagination = (pagination) => {
        const paginationEl = document.getElementById('pagination');
        paginationEl.innerHTML = '';

        // Previous button
        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${pagination.hasPrevPage ? '' : 'disabled'}`;
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${pagination.currentPage - 1})">
            <i class="bi bi-chevron-left"></i>
        </a>`;
        paginationEl.appendChild(prevLi);

        // Page numbers
        const startPage = Math.max(1, pagination.currentPage - 2);
        const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);

        for (let i = startPage; i <= endPage; i++) {
            const li = document.createElement('li');
            li.className = `page-item ${i === pagination.currentPage ? 'active' : ''}`;
            li.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
            paginationEl.appendChild(li);
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${pagination.hasNextPage ? '' : 'disabled'}`;
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${pagination.currentPage + 1})">
            <i class="bi bi-chevron-right"></i>
        </a>`;
        paginationEl.appendChild(nextLi);
    };

    // Change page
    const changePage = (page) => {
        if (page < 1) return;
        currentPage = page;
        loadUsers();
    };

    // Toggle password visibility
    const togglePassword = (inputId, button) => {
        const input = document.getElementById(inputId);
        const icon = button.querySelector('i');
        
        if (input.type === 'password') {
            input.type = 'text';
            icon.className = 'bi bi-eye-slash';
        } else {
            input.type = 'password';
            icon.className = 'bi bi-eye';
        }
    };

    // Reset filter
    const resetFilter = () => {
        document.getElementById('searchInput').value = '';
        document.getElementById('limitSelect').value = '10';
        currentPage = 1;
        currentLimit = 10;
        currentSearch = '';
        loadUsers();
    };

    // Add user
    document.getElementById('addUserForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitBtn = e.target.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status"></span> Adding...';
        submitBtn.disabled = true;
        
        const username = document.getElementById('addUsername').value;
        const email = document.getElementById('addEmail').value;
        const password = document.getElementById('addPassword').value;

        try {
            const response = await apiCall('/api/users', {
                method: 'POST',
                body: JSON.stringify({ username, email, password })
            });

            const data = await response.json();
            
            if (data.success) {
                bootstrap.Modal.getInstance(document.getElementById('addUserModal')).hide();
                document.getElementById('addUserForm').reset();
                loadUsers();
                showToast('User added successfully!', 'success');
            } else {
                showToast(data.message || 'Failed to add user', 'error');
            }
        } catch (error) {
            console.error('Error adding user:', error);
            showToast('Error adding user', 'error');
        } finally {
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    });

    // Edit user
    const editUser = async (id) => {
        try {
            const response = await apiCall(`/api/users/${id}`);
            const data = await response.json();

            if (data.success) {
                const user = data.data;
                document.getElementById('editUserId').value = user.id;
                document.getElementById('editUsername').value = user.username;
                document.getElementById('editEmail').value = user.email || '';
                document.getElementById('editPassword').value = '';
                
                new bootstrap.Modal(document.getElementById('editUserModal')).show();
            } else {
                showToast('Failed to load user data', 'error');
            }
        } catch (error) {
            console.error('Error getting user:', error);
            showToast('Error loading user data', 'error');
        }
    };

    // Update user
    document.getElementById('editUserForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitBtn = e.target.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status"></span> Updating...';
        submitBtn.disabled = true;
        
        const id = document.getElementById('editUserId').value;
        const username = document.getElementById('editUsername').value;
        const email = document.getElementById('editEmail').value;
        const password = document.getElementById('editPassword').value;

        const updateData = { username, email };
        if (password) updateData.password = password;

        try {
            const response = await apiCall(`/api/users/${id}`, {
                method: 'PUT',
                body: JSON.stringify(updateData)
            });

            const data = await response.json();
            
            if (data.success) {
                bootstrap.Modal.getInstance(document.getElementById('editUserModal')).hide();
                loadUsers();
                showToast('User updated successfully!', 'success');
            } else {
                showToast(data.message || 'Failed to update user', 'error');
            }
        } catch (error) {
            console.error('Error updating user:', error);
            showToast('Error updating user', 'error');
        } finally {
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    });

    // Confirm delete user
    const confirmDeleteUser = (id) => {
        deleteUserId = id;
        new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show();
    };

    // Delete user
    const deleteUser = async () => {
        if (!deleteUserId) return;

        const confirmBtn = document.getElementById('confirmDeleteBtn');
        const originalText = confirmBtn.innerHTML;
        confirmBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status"></span> Deleting...';
        confirmBtn.disabled = true;

        try {
            const response = await apiCall(`/api/users/${deleteUserId}`, {
                method: 'DELETE'
            });

            const data = await response.json();
            
            if (data.success) {
                bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();
                loadUsers();
                showToast('User deleted successfully!', 'success');
            } else {
                showToast(data.message || 'Failed to delete user', 'error');
            }
        } catch (error) {
            console.error('Error deleting user:', error);
            showToast('Error deleting user', 'error');
        } finally {
            confirmBtn.innerHTML = originalText;
            confirmBtn.disabled = false;
            deleteUserId = null;
        }
    };

    // Search functionality
    document.getElementById('searchBtn').addEventListener('click', () => {
        currentSearch = document.getElementById('searchInput').value;
        currentPage = 1;
        loadUsers();
    });

    document.getElementById('searchInput').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            currentSearch = e.target.value;
            currentPage = 1;
            loadUsers();
        }
    });

    // Limit change
    document.getElementById('limitSelect').addEventListener('change', (e) => {
        currentLimit = parseInt(e.target.value);
        currentPage = 1;
        loadUsers();
    });

    // Add event listener to delete confirm button
    document.getElementById('confirmDeleteBtn').addEventListener('click', deleteUser);

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
        if (checkAuth()) {
            loadUsers();
        }
    });

    // Auto-refresh every 30 seconds
    setInterval(() => {
        if (checkAuth() && document.visibilityState === 'visible') {
            loadUsers();
        }
    }, 30000);
</script>